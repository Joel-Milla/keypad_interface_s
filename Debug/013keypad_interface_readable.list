
013keypad_interface_readable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001440  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080015d0  080015d0  000025d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001608  08001608  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001608  08001608  00002608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001610  08001610  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001610  08001610  00002610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001614  08001614  00002614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001618  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000faa  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003df  00000000  00000000  00004030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00004410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d9  00000000  00000000  00004548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cc8  00000000  00000000  00004621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015d8  00000000  00000000  000072e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009a72  00000000  00000000  000088c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012333  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ba8  00000000  00000000  00012378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c5  00000000  00000000  00012f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080015b8 	.word	0x080015b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080015b8 	.word	0x080015b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
 * The pins that are going to be used as output are PD0-PD3 for the row ports (R1-R4). The pins are free to use
 * The pins that are going to be used as input are PD8-PD11 for the column ports (C1-C4). The pins are free to use
*/

int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
	RCC_AHB1ENR_t volatile *const pAHB1ClockEnableRegister = (RCC_AHB1ENR_t*) 0x40023830; // Memory address of RCC to enable the clock
 8000276:	4b4a      	ldr	r3, [pc, #296]	@ (80003a0 <main+0x130>)
 8000278:	617b      	str	r3, [r7, #20]
	GPIOx_MODE_t volatile *const pGPIODPortModeRegister = (GPIOx_MODE_t*) 0x40020C00; // Memory address to change the port modes (input/output/etc) of the pins in GPIOD
 800027a:	4b4a      	ldr	r3, [pc, #296]	@ (80003a4 <main+0x134>)
 800027c:	613b      	str	r3, [r7, #16]
	GPIOx_ODR_t volatile *const pGPIODOutputDataRegister = (GPIOx_ODR_t*) 0x40020C14; // Memory address to change the output of pins
 800027e:	4b4a      	ldr	r3, [pc, #296]	@ (80003a8 <main+0x138>)
 8000280:	60fb      	str	r3, [r7, #12]
	GPIOx_IDR_t volatile *const pGPIODInputDataRegister = (GPIOx_IDR_t*) 0x40020C10; // Memory address to read if there is any input in the pins
 8000282:	4b4a      	ldr	r3, [pc, #296]	@ (80003ac <main+0x13c>)
 8000284:	60bb      	str	r3, [r7, #8]
	GPIOx_PUPDR_t volatile *const pGPIODPullRegister = (GPIOx_PUPDR_t*) 0x40020C0C; // Memory address to change to pull up/down registers on specific pins
 8000286:	4b4a      	ldr	r3, [pc, #296]	@ (80003b0 <main+0x140>)
 8000288:	607b      	str	r3, [r7, #4]

	// 2. Initialize the clock register for the port that has the pins that will be used (GPIOD)
	pAHB1ClockEnableRegister->gpiod_en = 1;
 800028a:	697a      	ldr	r2, [r7, #20]
 800028c:	6813      	ldr	r3, [r2, #0]
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	6013      	str	r3, [r2, #0]

	// 3. Initialization of variables and setup of environment for the MCU
	// a. Make all row IOs mode as output (PD0-PD3)
	pGPIODPortModeRegister->pin_0 = 1;
 8000294:	693a      	ldr	r2, [r7, #16]
 8000296:	6813      	ldr	r3, [r2, #0]
 8000298:	2101      	movs	r1, #1
 800029a:	f361 0301 	bfi	r3, r1, #0, #2
 800029e:	6013      	str	r3, [r2, #0]
	pGPIODPortModeRegister->pin_1 = 1;
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	6813      	ldr	r3, [r2, #0]
 80002a4:	2101      	movs	r1, #1
 80002a6:	f361 0383 	bfi	r3, r1, #2, #2
 80002aa:	6013      	str	r3, [r2, #0]
	pGPIODPortModeRegister->pin_2 = 1;
 80002ac:	693a      	ldr	r2, [r7, #16]
 80002ae:	6813      	ldr	r3, [r2, #0]
 80002b0:	2101      	movs	r1, #1
 80002b2:	f361 1305 	bfi	r3, r1, #4, #2
 80002b6:	6013      	str	r3, [r2, #0]
	pGPIODPortModeRegister->pin_3 = 1;
 80002b8:	693a      	ldr	r2, [r7, #16]
 80002ba:	6813      	ldr	r3, [r2, #0]
 80002bc:	2101      	movs	r1, #1
 80002be:	f361 1387 	bfi	r3, r1, #6, #2
 80002c2:	6013      	str	r3, [r2, #0]
	// b. Make all column IOs mode as input (PD8-PD11)
	pGPIODPortModeRegister->pin_8 = 0;
 80002c4:	693a      	ldr	r2, [r7, #16]
 80002c6:	6813      	ldr	r3, [r2, #0]
 80002c8:	f36f 4311 	bfc	r3, #16, #2
 80002cc:	6013      	str	r3, [r2, #0]
	pGPIODPortModeRegister->pin_9 = 0;
 80002ce:	693a      	ldr	r2, [r7, #16]
 80002d0:	6813      	ldr	r3, [r2, #0]
 80002d2:	f36f 4393 	bfc	r3, #18, #2
 80002d6:	6013      	str	r3, [r2, #0]
	pGPIODPortModeRegister->pin_10 = 0;
 80002d8:	693a      	ldr	r2, [r7, #16]
 80002da:	6813      	ldr	r3, [r2, #0]
 80002dc:	f36f 5315 	bfc	r3, #20, #2
 80002e0:	6013      	str	r3, [r2, #0]
	pGPIODPortModeRegister->pin_11 = 0;
 80002e2:	693a      	ldr	r2, [r7, #16]
 80002e4:	6813      	ldr	r3, [r2, #0]
 80002e6:	f36f 5397 	bfc	r3, #22, #2
 80002ea:	6013      	str	r3, [r2, #0]
	// c. Activate internal pull-up resistors for columns IOs
	pGPIODPullRegister->pin_8 = 1;
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	6813      	ldr	r3, [r2, #0]
 80002f0:	2101      	movs	r1, #1
 80002f2:	f361 4311 	bfi	r3, r1, #16, #2
 80002f6:	6013      	str	r3, [r2, #0]
	pGPIODPullRegister->pin_9 = 1;
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	6813      	ldr	r3, [r2, #0]
 80002fc:	2101      	movs	r1, #1
 80002fe:	f361 4393 	bfi	r3, r1, #18, #2
 8000302:	6013      	str	r3, [r2, #0]
	pGPIODPullRegister->pin_10 = 1;
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	6813      	ldr	r3, [r2, #0]
 8000308:	2101      	movs	r1, #1
 800030a:	f361 5315 	bfi	r3, r1, #20, #2
 800030e:	6013      	str	r3, [r2, #0]
	pGPIODPullRegister->pin_11 = 1;
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	6813      	ldr	r3, [r2, #0]
 8000314:	2101      	movs	r1, #1
 8000316:	f361 5397 	bfi	r3, r1, #22, #2
 800031a:	6013      	str	r3, [r2, #0]

	// 4. Implement the key detect logic
	while (1) {
		// a. Set all row outputs as high
		setRowsAsHigh(pGPIODOutputDataRegister);
 800031c:	68f8      	ldr	r0, [r7, #12]
 800031e:	f000 f849 	bl	80003b4 <setRowsAsHigh>


		for (uint8_t volatile pinIterator = 0; pinIterator < 4; pinIterator++) {
 8000322:	2300      	movs	r3, #0
 8000324:	70fb      	strb	r3, [r7, #3]
 8000326:	e035      	b.n	8000394 <main+0x124>
			// b. Set Row_i (i = pinIterator) as low
			switch(pinIterator) {
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2b03      	cmp	r3, #3
 800032e:	d823      	bhi.n	8000378 <main+0x108>
 8000330:	a201      	add	r2, pc, #4	@ (adr r2, 8000338 <main+0xc8>)
 8000332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000336:	bf00      	nop
 8000338:	08000349 	.word	0x08000349
 800033c:	08000355 	.word	0x08000355
 8000340:	08000361 	.word	0x08000361
 8000344:	0800036d 	.word	0x0800036d
			case 0:
				pGPIODOutputDataRegister->pin_0 = 0;
 8000348:	68fa      	ldr	r2, [r7, #12]
 800034a:	6813      	ldr	r3, [r2, #0]
 800034c:	f36f 0300 	bfc	r3, #0, #1
 8000350:	6013      	str	r3, [r2, #0]
				break;
 8000352:	e011      	b.n	8000378 <main+0x108>
			case 1:
				pGPIODOutputDataRegister->pin_1 = 0;
 8000354:	68fa      	ldr	r2, [r7, #12]
 8000356:	6813      	ldr	r3, [r2, #0]
 8000358:	f36f 0341 	bfc	r3, #1, #1
 800035c:	6013      	str	r3, [r2, #0]
				break;
 800035e:	e00b      	b.n	8000378 <main+0x108>
			case 2:
				pGPIODOutputDataRegister->pin_2 = 0;
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	6813      	ldr	r3, [r2, #0]
 8000364:	f36f 0382 	bfc	r3, #2, #1
 8000368:	6013      	str	r3, [r2, #0]
				break;
 800036a:	e005      	b.n	8000378 <main+0x108>
			case 3:
				pGPIODOutputDataRegister->pin_3 = 0;
 800036c:	68fa      	ldr	r2, [r7, #12]
 800036e:	6813      	ldr	r3, [r2, #0]
 8000370:	f36f 03c3 	bfc	r3, #3, #1
 8000374:	6013      	str	r3, [r2, #0]
				break;
 8000376:	bf00      	nop
			}
			// c. Check what column changed to zero (C1-C4) - To confirm if those are the pressed key
			findConnectionCx(pinIterator, pGPIODInputDataRegister);
 8000378:	78fb      	ldrb	r3, [r7, #3]
 800037a:	b2db      	uxtb	r3, r3
 800037c:	68b9      	ldr	r1, [r7, #8]
 800037e:	4618      	mov	r0, r3
 8000380:	f000 f8aa 	bl	80004d8 <findConnectionCx>
			// d. Reset the outputs so the printing is done correctly
			setRowsAsHigh(pGPIODOutputDataRegister);
 8000384:	68f8      	ldr	r0, [r7, #12]
 8000386:	f000 f815 	bl	80003b4 <setRowsAsHigh>
		for (uint8_t volatile pinIterator = 0; pinIterator < 4; pinIterator++) {
 800038a:	78fb      	ldrb	r3, [r7, #3]
 800038c:	b2db      	uxtb	r3, r3
 800038e:	3301      	adds	r3, #1
 8000390:	b2db      	uxtb	r3, r3
 8000392:	70fb      	strb	r3, [r7, #3]
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	b2db      	uxtb	r3, r3
 8000398:	2b03      	cmp	r3, #3
 800039a:	d9c5      	bls.n	8000328 <main+0xb8>
		setRowsAsHigh(pGPIODOutputDataRegister);
 800039c:	e7be      	b.n	800031c <main+0xac>
 800039e:	bf00      	nop
 80003a0:	40023830 	.word	0x40023830
 80003a4:	40020c00 	.word	0x40020c00
 80003a8:	40020c14 	.word	0x40020c14
 80003ac:	40020c10 	.word	0x40020c10
 80003b0:	40020c0c 	.word	0x40020c0c

080003b4 <setRowsAsHigh>:
	}
}

// This function sets all the rows output state as high (as 1) so the columns are also shown all as high
void setRowsAsHigh(GPIOx_ODR_t volatile *const pGPIODOutputDataRegister)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	pGPIODOutputDataRegister->pin_0 = 1;
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	6813      	ldr	r3, [r2, #0]
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6013      	str	r3, [r2, #0]
	pGPIODOutputDataRegister->pin_1 = 1;
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	6813      	ldr	r3, [r2, #0]
 80003ca:	f043 0302 	orr.w	r3, r3, #2
 80003ce:	6013      	str	r3, [r2, #0]
	pGPIODOutputDataRegister->pin_2 = 1;
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	6813      	ldr	r3, [r2, #0]
 80003d4:	f043 0304 	orr.w	r3, r3, #4
 80003d8:	6013      	str	r3, [r2, #0]
	pGPIODOutputDataRegister->pin_3 = 1;
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	6813      	ldr	r3, [r2, #0]
 80003de:	f043 0308 	orr.w	r3, r3, #8
 80003e2:	6013      	str	r3, [r2, #0]
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
	...

080003f0 <delay>:

// Function that makes a delay when printing the values
void delay()
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
	// Make a delay using a for loop
	for(uint32_t volatile iterator; iterator < 300000; iterator++); // Causes 150miliseconds = 0.15 seconds
 80003f6:	e002      	b.n	80003fe <delay+0xe>
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3301      	adds	r3, #1
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a04      	ldr	r2, [pc, #16]	@ (8000414 <delay+0x24>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d9f8      	bls.n	80003f8 <delay+0x8>
}
 8000406:	bf00      	nop
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	000493df 	.word	0x000493df

08000418 <getCharacter>:


// Returns the character that matches the row and the column
uint8_t getCharacter(uint8_t row, uint8_t column)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	460a      	mov	r2, r1
 8000422:	71fb      	strb	r3, [r7, #7]
 8000424:	4613      	mov	r3, r2
 8000426:	71bb      	strb	r3, [r7, #6]
	switch(row) {
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	2b03      	cmp	r3, #3
 800042c:	d84e      	bhi.n	80004cc <getCharacter+0xb4>
 800042e:	a201      	add	r2, pc, #4	@ (adr r2, 8000434 <getCharacter+0x1c>)
 8000430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000434:	08000445 	.word	0x08000445
 8000438:	08000467 	.word	0x08000467
 800043c:	08000489 	.word	0x08000489
 8000440:	080004ab 	.word	0x080004ab
	case 0:
		if (column == 0) {
 8000444:	79bb      	ldrb	r3, [r7, #6]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d101      	bne.n	800044e <getCharacter+0x36>
			return '1';
 800044a:	2331      	movs	r3, #49	@ 0x31
 800044c:	e03f      	b.n	80004ce <getCharacter+0xb6>
		} else if (column == 1) {
 800044e:	79bb      	ldrb	r3, [r7, #6]
 8000450:	2b01      	cmp	r3, #1
 8000452:	d101      	bne.n	8000458 <getCharacter+0x40>
			return '2';
 8000454:	2332      	movs	r3, #50	@ 0x32
 8000456:	e03a      	b.n	80004ce <getCharacter+0xb6>
		} else if (column == 2) {
 8000458:	79bb      	ldrb	r3, [r7, #6]
 800045a:	2b02      	cmp	r3, #2
 800045c:	d101      	bne.n	8000462 <getCharacter+0x4a>
			return '3';
 800045e:	2333      	movs	r3, #51	@ 0x33
 8000460:	e035      	b.n	80004ce <getCharacter+0xb6>
		} else {
			return 'A';
 8000462:	2341      	movs	r3, #65	@ 0x41
 8000464:	e033      	b.n	80004ce <getCharacter+0xb6>
		}
	case 1:
		if (column == 0) {
 8000466:	79bb      	ldrb	r3, [r7, #6]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d101      	bne.n	8000470 <getCharacter+0x58>
			return '4';
 800046c:	2334      	movs	r3, #52	@ 0x34
 800046e:	e02e      	b.n	80004ce <getCharacter+0xb6>
		} else if (column == 1) {
 8000470:	79bb      	ldrb	r3, [r7, #6]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d101      	bne.n	800047a <getCharacter+0x62>
			return '5';
 8000476:	2335      	movs	r3, #53	@ 0x35
 8000478:	e029      	b.n	80004ce <getCharacter+0xb6>
		} else if (column == 2) {
 800047a:	79bb      	ldrb	r3, [r7, #6]
 800047c:	2b02      	cmp	r3, #2
 800047e:	d101      	bne.n	8000484 <getCharacter+0x6c>
			return '6';
 8000480:	2336      	movs	r3, #54	@ 0x36
 8000482:	e024      	b.n	80004ce <getCharacter+0xb6>
		} else {
			return 'B';
 8000484:	2342      	movs	r3, #66	@ 0x42
 8000486:	e022      	b.n	80004ce <getCharacter+0xb6>
		}
	case 2:
		if (column == 0) {
 8000488:	79bb      	ldrb	r3, [r7, #6]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d101      	bne.n	8000492 <getCharacter+0x7a>
			return '7';
 800048e:	2337      	movs	r3, #55	@ 0x37
 8000490:	e01d      	b.n	80004ce <getCharacter+0xb6>
		} else if (column == 1) {
 8000492:	79bb      	ldrb	r3, [r7, #6]
 8000494:	2b01      	cmp	r3, #1
 8000496:	d101      	bne.n	800049c <getCharacter+0x84>
			return '8';
 8000498:	2338      	movs	r3, #56	@ 0x38
 800049a:	e018      	b.n	80004ce <getCharacter+0xb6>
		} else if (column == 2) {
 800049c:	79bb      	ldrb	r3, [r7, #6]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d101      	bne.n	80004a6 <getCharacter+0x8e>
			return '9';
 80004a2:	2339      	movs	r3, #57	@ 0x39
 80004a4:	e013      	b.n	80004ce <getCharacter+0xb6>
		} else {
			return 'C';
 80004a6:	2343      	movs	r3, #67	@ 0x43
 80004a8:	e011      	b.n	80004ce <getCharacter+0xb6>
		}
	case 3:
		if (column == 0) {
 80004aa:	79bb      	ldrb	r3, [r7, #6]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d101      	bne.n	80004b4 <getCharacter+0x9c>
			return '*';
 80004b0:	232a      	movs	r3, #42	@ 0x2a
 80004b2:	e00c      	b.n	80004ce <getCharacter+0xb6>
		} else if (column == 1) {
 80004b4:	79bb      	ldrb	r3, [r7, #6]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d101      	bne.n	80004be <getCharacter+0xa6>
			return '0';
 80004ba:	2330      	movs	r3, #48	@ 0x30
 80004bc:	e007      	b.n	80004ce <getCharacter+0xb6>
		} else if (column == 2) {
 80004be:	79bb      	ldrb	r3, [r7, #6]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d101      	bne.n	80004c8 <getCharacter+0xb0>
			return '#';
 80004c4:	2323      	movs	r3, #35	@ 0x23
 80004c6:	e002      	b.n	80004ce <getCharacter+0xb6>
		} else {
			return 'D';
 80004c8:	2344      	movs	r3, #68	@ 0x44
 80004ca:	e000      	b.n	80004ce <getCharacter+0xb6>
		}
	default:
		return 255;
 80004cc:	23ff      	movs	r3, #255	@ 0xff
	}
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <findConnectionCx>:

// Finds which column is matched with the row called
void findConnectionCx(uint8_t row, GPIOx_IDR_t volatile *const pGPIODInputDataRegister)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	6039      	str	r1, [r7, #0]
 80004e2:	71fb      	strb	r3, [r7, #7]
	// Check which column is on
	uint8_t C0IsOn = !pGPIODInputDataRegister->pin_8;
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f3c3 2300 	ubfx	r3, r3, #8, #1
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	f083 0301 	eor.w	r3, r3, #1
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	73fb      	strb	r3, [r7, #15]
	uint8_t C1IsOn = !pGPIODInputDataRegister->pin_9;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f3c3 2340 	ubfx	r3, r3, #9, #1
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	f083 0301 	eor.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	73bb      	strb	r3, [r7, #14]
	uint8_t C2IsOn = !pGPIODInputDataRegister->pin_10;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8000510:	b2db      	uxtb	r3, r3
 8000512:	f083 0301 	eor.w	r3, r3, #1
 8000516:	b2db      	uxtb	r3, r3
 8000518:	737b      	strb	r3, [r7, #13]
	uint8_t C3IsOn = !pGPIODInputDataRegister->pin_11;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 8000522:	b2db      	uxtb	r3, r3
 8000524:	f083 0301 	eor.w	r3, r3, #1
 8000528:	b2db      	uxtb	r3, r3
 800052a:	733b      	strb	r3, [r7, #12]

	uint8_t columnOn = C0IsOn ? 0 : C1IsOn ? 1 : C2IsOn ? 2 : C3IsOn ? 3 : 255; // Check which column is the one in the ground. 255 if there is no column on
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d110      	bne.n	8000554 <findConnectionCx+0x7c>
 8000532:	7bbb      	ldrb	r3, [r7, #14]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d10b      	bne.n	8000550 <findConnectionCx+0x78>
 8000538:	7b7b      	ldrb	r3, [r7, #13]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d106      	bne.n	800054c <findConnectionCx+0x74>
 800053e:	7b3b      	ldrb	r3, [r7, #12]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <findConnectionCx+0x70>
 8000544:	2303      	movs	r3, #3
 8000546:	e006      	b.n	8000556 <findConnectionCx+0x7e>
 8000548:	23ff      	movs	r3, #255	@ 0xff
 800054a:	e004      	b.n	8000556 <findConnectionCx+0x7e>
 800054c:	2302      	movs	r3, #2
 800054e:	e002      	b.n	8000556 <findConnectionCx+0x7e>
 8000550:	2301      	movs	r3, #1
 8000552:	e000      	b.n	8000556 <findConnectionCx+0x7e>
 8000554:	2300      	movs	r3, #0
 8000556:	72fb      	strb	r3, [r7, #11]
	if (columnOn != 255) {
 8000558:	7afb      	ldrb	r3, [r7, #11]
 800055a:	2bff      	cmp	r3, #255	@ 0xff
 800055c:	d00c      	beq.n	8000578 <findConnectionCx+0xa0>
		delay(); // Apply delay before printing
 800055e:	f7ff ff47 	bl	80003f0 <delay>
		// Print only when a column is on
		printf("%c\n", getCharacter(row, columnOn));
 8000562:	7afa      	ldrb	r2, [r7, #11]
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	4611      	mov	r1, r2
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ff55 	bl	8000418 <getCharacter>
 800056e:	4603      	mov	r3, r0
 8000570:	4619      	mov	r1, r3
 8000572:	4803      	ldr	r0, [pc, #12]	@ (8000580 <findConnectionCx+0xa8>)
 8000574:	f000 f9b8 	bl	80008e8 <iprintf>
	}
}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	080015d0 	.word	0x080015d0

08000584 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800058e:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <ITM_SendChar+0x44>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a0d      	ldr	r2, [pc, #52]	@ (80005c8 <ITM_SendChar+0x44>)
 8000594:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000598:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800059a:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <ITM_SendChar+0x48>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a0b      	ldr	r2, [pc, #44]	@ (80005cc <ITM_SendChar+0x48>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005a6:	bf00      	nop
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f8      	beq.n	80005a8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005b6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	6013      	str	r3, [r2, #0]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	e000edfc 	.word	0xe000edfc
 80005cc:	e0000e00 	.word	0xe0000e00

080005d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	e00a      	b.n	80005f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005e2:	f3af 8000 	nop.w
 80005e6:	4601      	mov	r1, r0
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	60ba      	str	r2, [r7, #8]
 80005ee:	b2ca      	uxtb	r2, r1
 80005f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dbf0      	blt.n	80005e2 <_read+0x12>
  }

  return len;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <_write>:
__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b086      	sub	sp, #24
 800060e:	af00      	add	r7, sp, #0
 8000610:	60f8      	str	r0, [r7, #12]
 8000612:	60b9      	str	r1, [r7, #8]
 8000614:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e009      	b.n	8000630 <_write+0x26>
  {
    // __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	60ba      	str	r2, [r7, #8]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ffad 	bl	8000584 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	429a      	cmp	r2, r3
 8000636:	dbf1      	blt.n	800061c <_write+0x12>
  }
  return len;
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <_close>:

int _close(int file)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000668:	605a      	str	r2, [r3, #4]
  return 0;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <_isatty>:

int _isatty(int file)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800067e:	2301      	movs	r3, #1
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800068a:	b480      	push	{r7}
 800068c:	b085      	sub	sp, #20
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
	...

080006a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006ac:	4a14      	ldr	r2, [pc, #80]	@ (8000700 <_sbrk+0x5c>)
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <_sbrk+0x60>)
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b8:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <_sbrk+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d102      	bne.n	80006c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <_sbrk+0x64>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	@ (800070c <_sbrk+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d207      	bcs.n	80006e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d4:	f000 f9ac 	bl	8000a30 <__errno>
 80006d8:	4603      	mov	r3, r0
 80006da:	220c      	movs	r2, #12
 80006dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	e009      	b.n	80006f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <_sbrk+0x64>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ea:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <_sbrk+0x64>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	4a05      	ldr	r2, [pc, #20]	@ (8000708 <_sbrk+0x64>)
 80006f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006f6:	68fb      	ldr	r3, [r7, #12]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20020000 	.word	0x20020000
 8000704:	00000400 	.word	0x00000400
 8000708:	20000078 	.word	0x20000078
 800070c:	200001c8 	.word	0x200001c8

08000710 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000710:	480d      	ldr	r0, [pc, #52]	@ (8000748 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000712:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000714:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	@ (800074c <LoopForever+0x6>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	@ (8000750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	@ (8000754 <LoopForever+0xe>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	@ (8000758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	@ (800075c <LoopForever+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800073e:	f000 f97d 	bl	8000a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000742:	f7ff fd95 	bl	8000270 <main>

08000746 <LoopForever>:

LoopForever:
  b LoopForever
 8000746:	e7fe      	b.n	8000746 <LoopForever>
  ldr   r0, =_estack
 8000748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000754:	08001618 	.word	0x08001618
  ldr r2, =_sbss
 8000758:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800075c:	200001c8 	.word	0x200001c8

08000760 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC_IRQHandler>
	...

08000764 <std>:
 8000764:	2300      	movs	r3, #0
 8000766:	b510      	push	{r4, lr}
 8000768:	4604      	mov	r4, r0
 800076a:	e9c0 3300 	strd	r3, r3, [r0]
 800076e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000772:	6083      	str	r3, [r0, #8]
 8000774:	8181      	strh	r1, [r0, #12]
 8000776:	6643      	str	r3, [r0, #100]	@ 0x64
 8000778:	81c2      	strh	r2, [r0, #14]
 800077a:	6183      	str	r3, [r0, #24]
 800077c:	4619      	mov	r1, r3
 800077e:	2208      	movs	r2, #8
 8000780:	305c      	adds	r0, #92	@ 0x5c
 8000782:	f000 f906 	bl	8000992 <memset>
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <std+0x58>)
 8000788:	6263      	str	r3, [r4, #36]	@ 0x24
 800078a:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <std+0x5c>)
 800078c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800078e:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <std+0x60>)
 8000790:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <std+0x64>)
 8000794:	6323      	str	r3, [r4, #48]	@ 0x30
 8000796:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <std+0x68>)
 8000798:	6224      	str	r4, [r4, #32]
 800079a:	429c      	cmp	r4, r3
 800079c:	d006      	beq.n	80007ac <std+0x48>
 800079e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80007a2:	4294      	cmp	r4, r2
 80007a4:	d002      	beq.n	80007ac <std+0x48>
 80007a6:	33d0      	adds	r3, #208	@ 0xd0
 80007a8:	429c      	cmp	r4, r3
 80007aa:	d105      	bne.n	80007b8 <std+0x54>
 80007ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80007b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007b4:	f000 b966 	b.w	8000a84 <__retarget_lock_init_recursive>
 80007b8:	bd10      	pop	{r4, pc}
 80007ba:	bf00      	nop
 80007bc:	0800090d 	.word	0x0800090d
 80007c0:	0800092f 	.word	0x0800092f
 80007c4:	08000967 	.word	0x08000967
 80007c8:	0800098b 	.word	0x0800098b
 80007cc:	2000007c 	.word	0x2000007c

080007d0 <stdio_exit_handler>:
 80007d0:	4a02      	ldr	r2, [pc, #8]	@ (80007dc <stdio_exit_handler+0xc>)
 80007d2:	4903      	ldr	r1, [pc, #12]	@ (80007e0 <stdio_exit_handler+0x10>)
 80007d4:	4803      	ldr	r0, [pc, #12]	@ (80007e4 <stdio_exit_handler+0x14>)
 80007d6:	f000 b869 	b.w	80008ac <_fwalk_sglue>
 80007da:	bf00      	nop
 80007dc:	20000000 	.word	0x20000000
 80007e0:	08001319 	.word	0x08001319
 80007e4:	20000010 	.word	0x20000010

080007e8 <cleanup_stdio>:
 80007e8:	6841      	ldr	r1, [r0, #4]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <cleanup_stdio+0x34>)
 80007ec:	4299      	cmp	r1, r3
 80007ee:	b510      	push	{r4, lr}
 80007f0:	4604      	mov	r4, r0
 80007f2:	d001      	beq.n	80007f8 <cleanup_stdio+0x10>
 80007f4:	f000 fd90 	bl	8001318 <_fflush_r>
 80007f8:	68a1      	ldr	r1, [r4, #8]
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <cleanup_stdio+0x38>)
 80007fc:	4299      	cmp	r1, r3
 80007fe:	d002      	beq.n	8000806 <cleanup_stdio+0x1e>
 8000800:	4620      	mov	r0, r4
 8000802:	f000 fd89 	bl	8001318 <_fflush_r>
 8000806:	68e1      	ldr	r1, [r4, #12]
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <cleanup_stdio+0x3c>)
 800080a:	4299      	cmp	r1, r3
 800080c:	d004      	beq.n	8000818 <cleanup_stdio+0x30>
 800080e:	4620      	mov	r0, r4
 8000810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000814:	f000 bd80 	b.w	8001318 <_fflush_r>
 8000818:	bd10      	pop	{r4, pc}
 800081a:	bf00      	nop
 800081c:	2000007c 	.word	0x2000007c
 8000820:	200000e4 	.word	0x200000e4
 8000824:	2000014c 	.word	0x2000014c

08000828 <global_stdio_init.part.0>:
 8000828:	b510      	push	{r4, lr}
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <global_stdio_init.part.0+0x30>)
 800082c:	4c0b      	ldr	r4, [pc, #44]	@ (800085c <global_stdio_init.part.0+0x34>)
 800082e:	4a0c      	ldr	r2, [pc, #48]	@ (8000860 <global_stdio_init.part.0+0x38>)
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	4620      	mov	r0, r4
 8000834:	2200      	movs	r2, #0
 8000836:	2104      	movs	r1, #4
 8000838:	f7ff ff94 	bl	8000764 <std>
 800083c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000840:	2201      	movs	r2, #1
 8000842:	2109      	movs	r1, #9
 8000844:	f7ff ff8e 	bl	8000764 <std>
 8000848:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800084c:	2202      	movs	r2, #2
 800084e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000852:	2112      	movs	r1, #18
 8000854:	f7ff bf86 	b.w	8000764 <std>
 8000858:	200001b4 	.word	0x200001b4
 800085c:	2000007c 	.word	0x2000007c
 8000860:	080007d1 	.word	0x080007d1

08000864 <__sfp_lock_acquire>:
 8000864:	4801      	ldr	r0, [pc, #4]	@ (800086c <__sfp_lock_acquire+0x8>)
 8000866:	f000 b90e 	b.w	8000a86 <__retarget_lock_acquire_recursive>
 800086a:	bf00      	nop
 800086c:	200001bd 	.word	0x200001bd

08000870 <__sfp_lock_release>:
 8000870:	4801      	ldr	r0, [pc, #4]	@ (8000878 <__sfp_lock_release+0x8>)
 8000872:	f000 b909 	b.w	8000a88 <__retarget_lock_release_recursive>
 8000876:	bf00      	nop
 8000878:	200001bd 	.word	0x200001bd

0800087c <__sinit>:
 800087c:	b510      	push	{r4, lr}
 800087e:	4604      	mov	r4, r0
 8000880:	f7ff fff0 	bl	8000864 <__sfp_lock_acquire>
 8000884:	6a23      	ldr	r3, [r4, #32]
 8000886:	b11b      	cbz	r3, 8000890 <__sinit+0x14>
 8000888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800088c:	f7ff bff0 	b.w	8000870 <__sfp_lock_release>
 8000890:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <__sinit+0x28>)
 8000892:	6223      	str	r3, [r4, #32]
 8000894:	4b04      	ldr	r3, [pc, #16]	@ (80008a8 <__sinit+0x2c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1f5      	bne.n	8000888 <__sinit+0xc>
 800089c:	f7ff ffc4 	bl	8000828 <global_stdio_init.part.0>
 80008a0:	e7f2      	b.n	8000888 <__sinit+0xc>
 80008a2:	bf00      	nop
 80008a4:	080007e9 	.word	0x080007e9
 80008a8:	200001b4 	.word	0x200001b4

080008ac <_fwalk_sglue>:
 80008ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008b0:	4607      	mov	r7, r0
 80008b2:	4688      	mov	r8, r1
 80008b4:	4614      	mov	r4, r2
 80008b6:	2600      	movs	r6, #0
 80008b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008bc:	f1b9 0901 	subs.w	r9, r9, #1
 80008c0:	d505      	bpl.n	80008ce <_fwalk_sglue+0x22>
 80008c2:	6824      	ldr	r4, [r4, #0]
 80008c4:	2c00      	cmp	r4, #0
 80008c6:	d1f7      	bne.n	80008b8 <_fwalk_sglue+0xc>
 80008c8:	4630      	mov	r0, r6
 80008ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008ce:	89ab      	ldrh	r3, [r5, #12]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d907      	bls.n	80008e4 <_fwalk_sglue+0x38>
 80008d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008d8:	3301      	adds	r3, #1
 80008da:	d003      	beq.n	80008e4 <_fwalk_sglue+0x38>
 80008dc:	4629      	mov	r1, r5
 80008de:	4638      	mov	r0, r7
 80008e0:	47c0      	blx	r8
 80008e2:	4306      	orrs	r6, r0
 80008e4:	3568      	adds	r5, #104	@ 0x68
 80008e6:	e7e9      	b.n	80008bc <_fwalk_sglue+0x10>

080008e8 <iprintf>:
 80008e8:	b40f      	push	{r0, r1, r2, r3}
 80008ea:	b507      	push	{r0, r1, r2, lr}
 80008ec:	4906      	ldr	r1, [pc, #24]	@ (8000908 <iprintf+0x20>)
 80008ee:	ab04      	add	r3, sp, #16
 80008f0:	6808      	ldr	r0, [r1, #0]
 80008f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80008f6:	6881      	ldr	r1, [r0, #8]
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	f000 f9e7 	bl	8000ccc <_vfiprintf_r>
 80008fe:	b003      	add	sp, #12
 8000900:	f85d eb04 	ldr.w	lr, [sp], #4
 8000904:	b004      	add	sp, #16
 8000906:	4770      	bx	lr
 8000908:	2000000c 	.word	0x2000000c

0800090c <__sread>:
 800090c:	b510      	push	{r4, lr}
 800090e:	460c      	mov	r4, r1
 8000910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000914:	f000 f868 	bl	80009e8 <_read_r>
 8000918:	2800      	cmp	r0, #0
 800091a:	bfab      	itete	ge
 800091c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800091e:	89a3      	ldrhlt	r3, [r4, #12]
 8000920:	181b      	addge	r3, r3, r0
 8000922:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000926:	bfac      	ite	ge
 8000928:	6563      	strge	r3, [r4, #84]	@ 0x54
 800092a:	81a3      	strhlt	r3, [r4, #12]
 800092c:	bd10      	pop	{r4, pc}

0800092e <__swrite>:
 800092e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000932:	461f      	mov	r7, r3
 8000934:	898b      	ldrh	r3, [r1, #12]
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	4605      	mov	r5, r0
 800093a:	460c      	mov	r4, r1
 800093c:	4616      	mov	r6, r2
 800093e:	d505      	bpl.n	800094c <__swrite+0x1e>
 8000940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000944:	2302      	movs	r3, #2
 8000946:	2200      	movs	r2, #0
 8000948:	f000 f83c 	bl	80009c4 <_lseek_r>
 800094c:	89a3      	ldrh	r3, [r4, #12]
 800094e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000952:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000956:	81a3      	strh	r3, [r4, #12]
 8000958:	4632      	mov	r2, r6
 800095a:	463b      	mov	r3, r7
 800095c:	4628      	mov	r0, r5
 800095e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000962:	f000 b853 	b.w	8000a0c <_write_r>

08000966 <__sseek>:
 8000966:	b510      	push	{r4, lr}
 8000968:	460c      	mov	r4, r1
 800096a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800096e:	f000 f829 	bl	80009c4 <_lseek_r>
 8000972:	1c43      	adds	r3, r0, #1
 8000974:	89a3      	ldrh	r3, [r4, #12]
 8000976:	bf15      	itete	ne
 8000978:	6560      	strne	r0, [r4, #84]	@ 0x54
 800097a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800097e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000982:	81a3      	strheq	r3, [r4, #12]
 8000984:	bf18      	it	ne
 8000986:	81a3      	strhne	r3, [r4, #12]
 8000988:	bd10      	pop	{r4, pc}

0800098a <__sclose>:
 800098a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800098e:	f000 b809 	b.w	80009a4 <_close_r>

08000992 <memset>:
 8000992:	4402      	add	r2, r0
 8000994:	4603      	mov	r3, r0
 8000996:	4293      	cmp	r3, r2
 8000998:	d100      	bne.n	800099c <memset+0xa>
 800099a:	4770      	bx	lr
 800099c:	f803 1b01 	strb.w	r1, [r3], #1
 80009a0:	e7f9      	b.n	8000996 <memset+0x4>
	...

080009a4 <_close_r>:
 80009a4:	b538      	push	{r3, r4, r5, lr}
 80009a6:	4d06      	ldr	r5, [pc, #24]	@ (80009c0 <_close_r+0x1c>)
 80009a8:	2300      	movs	r3, #0
 80009aa:	4604      	mov	r4, r0
 80009ac:	4608      	mov	r0, r1
 80009ae:	602b      	str	r3, [r5, #0]
 80009b0:	f7ff fe47 	bl	8000642 <_close>
 80009b4:	1c43      	adds	r3, r0, #1
 80009b6:	d102      	bne.n	80009be <_close_r+0x1a>
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	b103      	cbz	r3, 80009be <_close_r+0x1a>
 80009bc:	6023      	str	r3, [r4, #0]
 80009be:	bd38      	pop	{r3, r4, r5, pc}
 80009c0:	200001b8 	.word	0x200001b8

080009c4 <_lseek_r>:
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4d07      	ldr	r5, [pc, #28]	@ (80009e4 <_lseek_r+0x20>)
 80009c8:	4604      	mov	r4, r0
 80009ca:	4608      	mov	r0, r1
 80009cc:	4611      	mov	r1, r2
 80009ce:	2200      	movs	r2, #0
 80009d0:	602a      	str	r2, [r5, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	f7ff fe59 	bl	800068a <_lseek>
 80009d8:	1c43      	adds	r3, r0, #1
 80009da:	d102      	bne.n	80009e2 <_lseek_r+0x1e>
 80009dc:	682b      	ldr	r3, [r5, #0]
 80009de:	b103      	cbz	r3, 80009e2 <_lseek_r+0x1e>
 80009e0:	6023      	str	r3, [r4, #0]
 80009e2:	bd38      	pop	{r3, r4, r5, pc}
 80009e4:	200001b8 	.word	0x200001b8

080009e8 <_read_r>:
 80009e8:	b538      	push	{r3, r4, r5, lr}
 80009ea:	4d07      	ldr	r5, [pc, #28]	@ (8000a08 <_read_r+0x20>)
 80009ec:	4604      	mov	r4, r0
 80009ee:	4608      	mov	r0, r1
 80009f0:	4611      	mov	r1, r2
 80009f2:	2200      	movs	r2, #0
 80009f4:	602a      	str	r2, [r5, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	f7ff fdea 	bl	80005d0 <_read>
 80009fc:	1c43      	adds	r3, r0, #1
 80009fe:	d102      	bne.n	8000a06 <_read_r+0x1e>
 8000a00:	682b      	ldr	r3, [r5, #0]
 8000a02:	b103      	cbz	r3, 8000a06 <_read_r+0x1e>
 8000a04:	6023      	str	r3, [r4, #0]
 8000a06:	bd38      	pop	{r3, r4, r5, pc}
 8000a08:	200001b8 	.word	0x200001b8

08000a0c <_write_r>:
 8000a0c:	b538      	push	{r3, r4, r5, lr}
 8000a0e:	4d07      	ldr	r5, [pc, #28]	@ (8000a2c <_write_r+0x20>)
 8000a10:	4604      	mov	r4, r0
 8000a12:	4608      	mov	r0, r1
 8000a14:	4611      	mov	r1, r2
 8000a16:	2200      	movs	r2, #0
 8000a18:	602a      	str	r2, [r5, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	f7ff fdf5 	bl	800060a <_write>
 8000a20:	1c43      	adds	r3, r0, #1
 8000a22:	d102      	bne.n	8000a2a <_write_r+0x1e>
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	b103      	cbz	r3, 8000a2a <_write_r+0x1e>
 8000a28:	6023      	str	r3, [r4, #0]
 8000a2a:	bd38      	pop	{r3, r4, r5, pc}
 8000a2c:	200001b8 	.word	0x200001b8

08000a30 <__errno>:
 8000a30:	4b01      	ldr	r3, [pc, #4]	@ (8000a38 <__errno+0x8>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	2000000c 	.word	0x2000000c

08000a3c <__libc_init_array>:
 8000a3c:	b570      	push	{r4, r5, r6, lr}
 8000a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8000a74 <__libc_init_array+0x38>)
 8000a40:	4c0d      	ldr	r4, [pc, #52]	@ (8000a78 <__libc_init_array+0x3c>)
 8000a42:	1b64      	subs	r4, r4, r5
 8000a44:	10a4      	asrs	r4, r4, #2
 8000a46:	2600      	movs	r6, #0
 8000a48:	42a6      	cmp	r6, r4
 8000a4a:	d109      	bne.n	8000a60 <__libc_init_array+0x24>
 8000a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8000a7c <__libc_init_array+0x40>)
 8000a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8000a80 <__libc_init_array+0x44>)
 8000a50:	f000 fdb2 	bl	80015b8 <_init>
 8000a54:	1b64      	subs	r4, r4, r5
 8000a56:	10a4      	asrs	r4, r4, #2
 8000a58:	2600      	movs	r6, #0
 8000a5a:	42a6      	cmp	r6, r4
 8000a5c:	d105      	bne.n	8000a6a <__libc_init_array+0x2e>
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a64:	4798      	blx	r3
 8000a66:	3601      	adds	r6, #1
 8000a68:	e7ee      	b.n	8000a48 <__libc_init_array+0xc>
 8000a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a6e:	4798      	blx	r3
 8000a70:	3601      	adds	r6, #1
 8000a72:	e7f2      	b.n	8000a5a <__libc_init_array+0x1e>
 8000a74:	08001610 	.word	0x08001610
 8000a78:	08001610 	.word	0x08001610
 8000a7c:	08001610 	.word	0x08001610
 8000a80:	08001614 	.word	0x08001614

08000a84 <__retarget_lock_init_recursive>:
 8000a84:	4770      	bx	lr

08000a86 <__retarget_lock_acquire_recursive>:
 8000a86:	4770      	bx	lr

08000a88 <__retarget_lock_release_recursive>:
 8000a88:	4770      	bx	lr
	...

08000a8c <_free_r>:
 8000a8c:	b538      	push	{r3, r4, r5, lr}
 8000a8e:	4605      	mov	r5, r0
 8000a90:	2900      	cmp	r1, #0
 8000a92:	d041      	beq.n	8000b18 <_free_r+0x8c>
 8000a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a98:	1f0c      	subs	r4, r1, #4
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	bfb8      	it	lt
 8000a9e:	18e4      	addlt	r4, r4, r3
 8000aa0:	f000 f8e0 	bl	8000c64 <__malloc_lock>
 8000aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b1c <_free_r+0x90>)
 8000aa6:	6813      	ldr	r3, [r2, #0]
 8000aa8:	b933      	cbnz	r3, 8000ab8 <_free_r+0x2c>
 8000aaa:	6063      	str	r3, [r4, #4]
 8000aac:	6014      	str	r4, [r2, #0]
 8000aae:	4628      	mov	r0, r5
 8000ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ab4:	f000 b8dc 	b.w	8000c70 <__malloc_unlock>
 8000ab8:	42a3      	cmp	r3, r4
 8000aba:	d908      	bls.n	8000ace <_free_r+0x42>
 8000abc:	6820      	ldr	r0, [r4, #0]
 8000abe:	1821      	adds	r1, r4, r0
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	bf01      	itttt	eq
 8000ac4:	6819      	ldreq	r1, [r3, #0]
 8000ac6:	685b      	ldreq	r3, [r3, #4]
 8000ac8:	1809      	addeq	r1, r1, r0
 8000aca:	6021      	streq	r1, [r4, #0]
 8000acc:	e7ed      	b.n	8000aaa <_free_r+0x1e>
 8000ace:	461a      	mov	r2, r3
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	b10b      	cbz	r3, 8000ad8 <_free_r+0x4c>
 8000ad4:	42a3      	cmp	r3, r4
 8000ad6:	d9fa      	bls.n	8000ace <_free_r+0x42>
 8000ad8:	6811      	ldr	r1, [r2, #0]
 8000ada:	1850      	adds	r0, r2, r1
 8000adc:	42a0      	cmp	r0, r4
 8000ade:	d10b      	bne.n	8000af8 <_free_r+0x6c>
 8000ae0:	6820      	ldr	r0, [r4, #0]
 8000ae2:	4401      	add	r1, r0
 8000ae4:	1850      	adds	r0, r2, r1
 8000ae6:	4283      	cmp	r3, r0
 8000ae8:	6011      	str	r1, [r2, #0]
 8000aea:	d1e0      	bne.n	8000aae <_free_r+0x22>
 8000aec:	6818      	ldr	r0, [r3, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	6053      	str	r3, [r2, #4]
 8000af2:	4408      	add	r0, r1
 8000af4:	6010      	str	r0, [r2, #0]
 8000af6:	e7da      	b.n	8000aae <_free_r+0x22>
 8000af8:	d902      	bls.n	8000b00 <_free_r+0x74>
 8000afa:	230c      	movs	r3, #12
 8000afc:	602b      	str	r3, [r5, #0]
 8000afe:	e7d6      	b.n	8000aae <_free_r+0x22>
 8000b00:	6820      	ldr	r0, [r4, #0]
 8000b02:	1821      	adds	r1, r4, r0
 8000b04:	428b      	cmp	r3, r1
 8000b06:	bf04      	itt	eq
 8000b08:	6819      	ldreq	r1, [r3, #0]
 8000b0a:	685b      	ldreq	r3, [r3, #4]
 8000b0c:	6063      	str	r3, [r4, #4]
 8000b0e:	bf04      	itt	eq
 8000b10:	1809      	addeq	r1, r1, r0
 8000b12:	6021      	streq	r1, [r4, #0]
 8000b14:	6054      	str	r4, [r2, #4]
 8000b16:	e7ca      	b.n	8000aae <_free_r+0x22>
 8000b18:	bd38      	pop	{r3, r4, r5, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200001c4 	.word	0x200001c4

08000b20 <sbrk_aligned>:
 8000b20:	b570      	push	{r4, r5, r6, lr}
 8000b22:	4e0f      	ldr	r6, [pc, #60]	@ (8000b60 <sbrk_aligned+0x40>)
 8000b24:	460c      	mov	r4, r1
 8000b26:	6831      	ldr	r1, [r6, #0]
 8000b28:	4605      	mov	r5, r0
 8000b2a:	b911      	cbnz	r1, 8000b32 <sbrk_aligned+0x12>
 8000b2c:	f000 fcb0 	bl	8001490 <_sbrk_r>
 8000b30:	6030      	str	r0, [r6, #0]
 8000b32:	4621      	mov	r1, r4
 8000b34:	4628      	mov	r0, r5
 8000b36:	f000 fcab 	bl	8001490 <_sbrk_r>
 8000b3a:	1c43      	adds	r3, r0, #1
 8000b3c:	d103      	bne.n	8000b46 <sbrk_aligned+0x26>
 8000b3e:	f04f 34ff 	mov.w	r4, #4294967295
 8000b42:	4620      	mov	r0, r4
 8000b44:	bd70      	pop	{r4, r5, r6, pc}
 8000b46:	1cc4      	adds	r4, r0, #3
 8000b48:	f024 0403 	bic.w	r4, r4, #3
 8000b4c:	42a0      	cmp	r0, r4
 8000b4e:	d0f8      	beq.n	8000b42 <sbrk_aligned+0x22>
 8000b50:	1a21      	subs	r1, r4, r0
 8000b52:	4628      	mov	r0, r5
 8000b54:	f000 fc9c 	bl	8001490 <_sbrk_r>
 8000b58:	3001      	adds	r0, #1
 8000b5a:	d1f2      	bne.n	8000b42 <sbrk_aligned+0x22>
 8000b5c:	e7ef      	b.n	8000b3e <sbrk_aligned+0x1e>
 8000b5e:	bf00      	nop
 8000b60:	200001c0 	.word	0x200001c0

08000b64 <_malloc_r>:
 8000b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b68:	1ccd      	adds	r5, r1, #3
 8000b6a:	f025 0503 	bic.w	r5, r5, #3
 8000b6e:	3508      	adds	r5, #8
 8000b70:	2d0c      	cmp	r5, #12
 8000b72:	bf38      	it	cc
 8000b74:	250c      	movcc	r5, #12
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	4606      	mov	r6, r0
 8000b7a:	db01      	blt.n	8000b80 <_malloc_r+0x1c>
 8000b7c:	42a9      	cmp	r1, r5
 8000b7e:	d904      	bls.n	8000b8a <_malloc_r+0x26>
 8000b80:	230c      	movs	r3, #12
 8000b82:	6033      	str	r3, [r6, #0]
 8000b84:	2000      	movs	r0, #0
 8000b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c60 <_malloc_r+0xfc>
 8000b8e:	f000 f869 	bl	8000c64 <__malloc_lock>
 8000b92:	f8d8 3000 	ldr.w	r3, [r8]
 8000b96:	461c      	mov	r4, r3
 8000b98:	bb44      	cbnz	r4, 8000bec <_malloc_r+0x88>
 8000b9a:	4629      	mov	r1, r5
 8000b9c:	4630      	mov	r0, r6
 8000b9e:	f7ff ffbf 	bl	8000b20 <sbrk_aligned>
 8000ba2:	1c43      	adds	r3, r0, #1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	d158      	bne.n	8000c5a <_malloc_r+0xf6>
 8000ba8:	f8d8 4000 	ldr.w	r4, [r8]
 8000bac:	4627      	mov	r7, r4
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d143      	bne.n	8000c3a <_malloc_r+0xd6>
 8000bb2:	2c00      	cmp	r4, #0
 8000bb4:	d04b      	beq.n	8000c4e <_malloc_r+0xea>
 8000bb6:	6823      	ldr	r3, [r4, #0]
 8000bb8:	4639      	mov	r1, r7
 8000bba:	4630      	mov	r0, r6
 8000bbc:	eb04 0903 	add.w	r9, r4, r3
 8000bc0:	f000 fc66 	bl	8001490 <_sbrk_r>
 8000bc4:	4581      	cmp	r9, r0
 8000bc6:	d142      	bne.n	8000c4e <_malloc_r+0xea>
 8000bc8:	6821      	ldr	r1, [r4, #0]
 8000bca:	1a6d      	subs	r5, r5, r1
 8000bcc:	4629      	mov	r1, r5
 8000bce:	4630      	mov	r0, r6
 8000bd0:	f7ff ffa6 	bl	8000b20 <sbrk_aligned>
 8000bd4:	3001      	adds	r0, #1
 8000bd6:	d03a      	beq.n	8000c4e <_malloc_r+0xea>
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	442b      	add	r3, r5
 8000bdc:	6023      	str	r3, [r4, #0]
 8000bde:	f8d8 3000 	ldr.w	r3, [r8]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	bb62      	cbnz	r2, 8000c40 <_malloc_r+0xdc>
 8000be6:	f8c8 7000 	str.w	r7, [r8]
 8000bea:	e00f      	b.n	8000c0c <_malloc_r+0xa8>
 8000bec:	6822      	ldr	r2, [r4, #0]
 8000bee:	1b52      	subs	r2, r2, r5
 8000bf0:	d420      	bmi.n	8000c34 <_malloc_r+0xd0>
 8000bf2:	2a0b      	cmp	r2, #11
 8000bf4:	d917      	bls.n	8000c26 <_malloc_r+0xc2>
 8000bf6:	1961      	adds	r1, r4, r5
 8000bf8:	42a3      	cmp	r3, r4
 8000bfa:	6025      	str	r5, [r4, #0]
 8000bfc:	bf18      	it	ne
 8000bfe:	6059      	strne	r1, [r3, #4]
 8000c00:	6863      	ldr	r3, [r4, #4]
 8000c02:	bf08      	it	eq
 8000c04:	f8c8 1000 	streq.w	r1, [r8]
 8000c08:	5162      	str	r2, [r4, r5]
 8000c0a:	604b      	str	r3, [r1, #4]
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	f000 f82f 	bl	8000c70 <__malloc_unlock>
 8000c12:	f104 000b 	add.w	r0, r4, #11
 8000c16:	1d23      	adds	r3, r4, #4
 8000c18:	f020 0007 	bic.w	r0, r0, #7
 8000c1c:	1ac2      	subs	r2, r0, r3
 8000c1e:	bf1c      	itt	ne
 8000c20:	1a1b      	subne	r3, r3, r0
 8000c22:	50a3      	strne	r3, [r4, r2]
 8000c24:	e7af      	b.n	8000b86 <_malloc_r+0x22>
 8000c26:	6862      	ldr	r2, [r4, #4]
 8000c28:	42a3      	cmp	r3, r4
 8000c2a:	bf0c      	ite	eq
 8000c2c:	f8c8 2000 	streq.w	r2, [r8]
 8000c30:	605a      	strne	r2, [r3, #4]
 8000c32:	e7eb      	b.n	8000c0c <_malloc_r+0xa8>
 8000c34:	4623      	mov	r3, r4
 8000c36:	6864      	ldr	r4, [r4, #4]
 8000c38:	e7ae      	b.n	8000b98 <_malloc_r+0x34>
 8000c3a:	463c      	mov	r4, r7
 8000c3c:	687f      	ldr	r7, [r7, #4]
 8000c3e:	e7b6      	b.n	8000bae <_malloc_r+0x4a>
 8000c40:	461a      	mov	r2, r3
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	42a3      	cmp	r3, r4
 8000c46:	d1fb      	bne.n	8000c40 <_malloc_r+0xdc>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	6053      	str	r3, [r2, #4]
 8000c4c:	e7de      	b.n	8000c0c <_malloc_r+0xa8>
 8000c4e:	230c      	movs	r3, #12
 8000c50:	6033      	str	r3, [r6, #0]
 8000c52:	4630      	mov	r0, r6
 8000c54:	f000 f80c 	bl	8000c70 <__malloc_unlock>
 8000c58:	e794      	b.n	8000b84 <_malloc_r+0x20>
 8000c5a:	6005      	str	r5, [r0, #0]
 8000c5c:	e7d6      	b.n	8000c0c <_malloc_r+0xa8>
 8000c5e:	bf00      	nop
 8000c60:	200001c4 	.word	0x200001c4

08000c64 <__malloc_lock>:
 8000c64:	4801      	ldr	r0, [pc, #4]	@ (8000c6c <__malloc_lock+0x8>)
 8000c66:	f7ff bf0e 	b.w	8000a86 <__retarget_lock_acquire_recursive>
 8000c6a:	bf00      	nop
 8000c6c:	200001bc 	.word	0x200001bc

08000c70 <__malloc_unlock>:
 8000c70:	4801      	ldr	r0, [pc, #4]	@ (8000c78 <__malloc_unlock+0x8>)
 8000c72:	f7ff bf09 	b.w	8000a88 <__retarget_lock_release_recursive>
 8000c76:	bf00      	nop
 8000c78:	200001bc 	.word	0x200001bc

08000c7c <__sfputc_r>:
 8000c7c:	6893      	ldr	r3, [r2, #8]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	b410      	push	{r4}
 8000c84:	6093      	str	r3, [r2, #8]
 8000c86:	da07      	bge.n	8000c98 <__sfputc_r+0x1c>
 8000c88:	6994      	ldr	r4, [r2, #24]
 8000c8a:	42a3      	cmp	r3, r4
 8000c8c:	db01      	blt.n	8000c92 <__sfputc_r+0x16>
 8000c8e:	290a      	cmp	r1, #10
 8000c90:	d102      	bne.n	8000c98 <__sfputc_r+0x1c>
 8000c92:	bc10      	pop	{r4}
 8000c94:	f000 bb68 	b.w	8001368 <__swbuf_r>
 8000c98:	6813      	ldr	r3, [r2, #0]
 8000c9a:	1c58      	adds	r0, r3, #1
 8000c9c:	6010      	str	r0, [r2, #0]
 8000c9e:	7019      	strb	r1, [r3, #0]
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	bc10      	pop	{r4}
 8000ca4:	4770      	bx	lr

08000ca6 <__sfputs_r>:
 8000ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca8:	4606      	mov	r6, r0
 8000caa:	460f      	mov	r7, r1
 8000cac:	4614      	mov	r4, r2
 8000cae:	18d5      	adds	r5, r2, r3
 8000cb0:	42ac      	cmp	r4, r5
 8000cb2:	d101      	bne.n	8000cb8 <__sfputs_r+0x12>
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	e007      	b.n	8000cc8 <__sfputs_r+0x22>
 8000cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cbc:	463a      	mov	r2, r7
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f7ff ffdc 	bl	8000c7c <__sfputc_r>
 8000cc4:	1c43      	adds	r3, r0, #1
 8000cc6:	d1f3      	bne.n	8000cb0 <__sfputs_r+0xa>
 8000cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ccc <_vfiprintf_r>:
 8000ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	b09d      	sub	sp, #116	@ 0x74
 8000cd4:	4614      	mov	r4, r2
 8000cd6:	4698      	mov	r8, r3
 8000cd8:	4606      	mov	r6, r0
 8000cda:	b118      	cbz	r0, 8000ce4 <_vfiprintf_r+0x18>
 8000cdc:	6a03      	ldr	r3, [r0, #32]
 8000cde:	b90b      	cbnz	r3, 8000ce4 <_vfiprintf_r+0x18>
 8000ce0:	f7ff fdcc 	bl	800087c <__sinit>
 8000ce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ce6:	07d9      	lsls	r1, r3, #31
 8000ce8:	d405      	bmi.n	8000cf6 <_vfiprintf_r+0x2a>
 8000cea:	89ab      	ldrh	r3, [r5, #12]
 8000cec:	059a      	lsls	r2, r3, #22
 8000cee:	d402      	bmi.n	8000cf6 <_vfiprintf_r+0x2a>
 8000cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000cf2:	f7ff fec8 	bl	8000a86 <__retarget_lock_acquire_recursive>
 8000cf6:	89ab      	ldrh	r3, [r5, #12]
 8000cf8:	071b      	lsls	r3, r3, #28
 8000cfa:	d501      	bpl.n	8000d00 <_vfiprintf_r+0x34>
 8000cfc:	692b      	ldr	r3, [r5, #16]
 8000cfe:	b99b      	cbnz	r3, 8000d28 <_vfiprintf_r+0x5c>
 8000d00:	4629      	mov	r1, r5
 8000d02:	4630      	mov	r0, r6
 8000d04:	f000 fb6e 	bl	80013e4 <__swsetup_r>
 8000d08:	b170      	cbz	r0, 8000d28 <_vfiprintf_r+0x5c>
 8000d0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d0c:	07dc      	lsls	r4, r3, #31
 8000d0e:	d504      	bpl.n	8000d1a <_vfiprintf_r+0x4e>
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	b01d      	add	sp, #116	@ 0x74
 8000d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d1a:	89ab      	ldrh	r3, [r5, #12]
 8000d1c:	0598      	lsls	r0, r3, #22
 8000d1e:	d4f7      	bmi.n	8000d10 <_vfiprintf_r+0x44>
 8000d20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d22:	f7ff feb1 	bl	8000a88 <__retarget_lock_release_recursive>
 8000d26:	e7f3      	b.n	8000d10 <_vfiprintf_r+0x44>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d2c:	2320      	movs	r3, #32
 8000d2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d36:	2330      	movs	r3, #48	@ 0x30
 8000d38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000ee8 <_vfiprintf_r+0x21c>
 8000d3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d40:	f04f 0901 	mov.w	r9, #1
 8000d44:	4623      	mov	r3, r4
 8000d46:	469a      	mov	sl, r3
 8000d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d4c:	b10a      	cbz	r2, 8000d52 <_vfiprintf_r+0x86>
 8000d4e:	2a25      	cmp	r2, #37	@ 0x25
 8000d50:	d1f9      	bne.n	8000d46 <_vfiprintf_r+0x7a>
 8000d52:	ebba 0b04 	subs.w	fp, sl, r4
 8000d56:	d00b      	beq.n	8000d70 <_vfiprintf_r+0xa4>
 8000d58:	465b      	mov	r3, fp
 8000d5a:	4622      	mov	r2, r4
 8000d5c:	4629      	mov	r1, r5
 8000d5e:	4630      	mov	r0, r6
 8000d60:	f7ff ffa1 	bl	8000ca6 <__sfputs_r>
 8000d64:	3001      	adds	r0, #1
 8000d66:	f000 80a7 	beq.w	8000eb8 <_vfiprintf_r+0x1ec>
 8000d6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d6c:	445a      	add	r2, fp
 8000d6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d70:	f89a 3000 	ldrb.w	r3, [sl]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 809f 	beq.w	8000eb8 <_vfiprintf_r+0x1ec>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d84:	f10a 0a01 	add.w	sl, sl, #1
 8000d88:	9304      	str	r3, [sp, #16]
 8000d8a:	9307      	str	r3, [sp, #28]
 8000d8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d90:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d92:	4654      	mov	r4, sl
 8000d94:	2205      	movs	r2, #5
 8000d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d9a:	4853      	ldr	r0, [pc, #332]	@ (8000ee8 <_vfiprintf_r+0x21c>)
 8000d9c:	f7ff fa18 	bl	80001d0 <memchr>
 8000da0:	9a04      	ldr	r2, [sp, #16]
 8000da2:	b9d8      	cbnz	r0, 8000ddc <_vfiprintf_r+0x110>
 8000da4:	06d1      	lsls	r1, r2, #27
 8000da6:	bf44      	itt	mi
 8000da8:	2320      	movmi	r3, #32
 8000daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000dae:	0713      	lsls	r3, r2, #28
 8000db0:	bf44      	itt	mi
 8000db2:	232b      	movmi	r3, #43	@ 0x2b
 8000db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000db8:	f89a 3000 	ldrb.w	r3, [sl]
 8000dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dbe:	d015      	beq.n	8000dec <_vfiprintf_r+0x120>
 8000dc0:	9a07      	ldr	r2, [sp, #28]
 8000dc2:	4654      	mov	r4, sl
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f04f 0c0a 	mov.w	ip, #10
 8000dca:	4621      	mov	r1, r4
 8000dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dd0:	3b30      	subs	r3, #48	@ 0x30
 8000dd2:	2b09      	cmp	r3, #9
 8000dd4:	d94b      	bls.n	8000e6e <_vfiprintf_r+0x1a2>
 8000dd6:	b1b0      	cbz	r0, 8000e06 <_vfiprintf_r+0x13a>
 8000dd8:	9207      	str	r2, [sp, #28]
 8000dda:	e014      	b.n	8000e06 <_vfiprintf_r+0x13a>
 8000ddc:	eba0 0308 	sub.w	r3, r0, r8
 8000de0:	fa09 f303 	lsl.w	r3, r9, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	9304      	str	r3, [sp, #16]
 8000de8:	46a2      	mov	sl, r4
 8000dea:	e7d2      	b.n	8000d92 <_vfiprintf_r+0xc6>
 8000dec:	9b03      	ldr	r3, [sp, #12]
 8000dee:	1d19      	adds	r1, r3, #4
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	9103      	str	r1, [sp, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	bfbb      	ittet	lt
 8000df8:	425b      	neglt	r3, r3
 8000dfa:	f042 0202 	orrlt.w	r2, r2, #2
 8000dfe:	9307      	strge	r3, [sp, #28]
 8000e00:	9307      	strlt	r3, [sp, #28]
 8000e02:	bfb8      	it	lt
 8000e04:	9204      	strlt	r2, [sp, #16]
 8000e06:	7823      	ldrb	r3, [r4, #0]
 8000e08:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e0a:	d10a      	bne.n	8000e22 <_vfiprintf_r+0x156>
 8000e0c:	7863      	ldrb	r3, [r4, #1]
 8000e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e10:	d132      	bne.n	8000e78 <_vfiprintf_r+0x1ac>
 8000e12:	9b03      	ldr	r3, [sp, #12]
 8000e14:	1d1a      	adds	r2, r3, #4
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	9203      	str	r2, [sp, #12]
 8000e1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e1e:	3402      	adds	r4, #2
 8000e20:	9305      	str	r3, [sp, #20]
 8000e22:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000eec <_vfiprintf_r+0x220>
 8000e26:	7821      	ldrb	r1, [r4, #0]
 8000e28:	2203      	movs	r2, #3
 8000e2a:	4650      	mov	r0, sl
 8000e2c:	f7ff f9d0 	bl	80001d0 <memchr>
 8000e30:	b138      	cbz	r0, 8000e42 <_vfiprintf_r+0x176>
 8000e32:	9b04      	ldr	r3, [sp, #16]
 8000e34:	eba0 000a 	sub.w	r0, r0, sl
 8000e38:	2240      	movs	r2, #64	@ 0x40
 8000e3a:	4082      	lsls	r2, r0
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	3401      	adds	r4, #1
 8000e40:	9304      	str	r3, [sp, #16]
 8000e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e46:	482a      	ldr	r0, [pc, #168]	@ (8000ef0 <_vfiprintf_r+0x224>)
 8000e48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e4c:	2206      	movs	r2, #6
 8000e4e:	f7ff f9bf 	bl	80001d0 <memchr>
 8000e52:	2800      	cmp	r0, #0
 8000e54:	d03f      	beq.n	8000ed6 <_vfiprintf_r+0x20a>
 8000e56:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <_vfiprintf_r+0x228>)
 8000e58:	bb1b      	cbnz	r3, 8000ea2 <_vfiprintf_r+0x1d6>
 8000e5a:	9b03      	ldr	r3, [sp, #12]
 8000e5c:	3307      	adds	r3, #7
 8000e5e:	f023 0307 	bic.w	r3, r3, #7
 8000e62:	3308      	adds	r3, #8
 8000e64:	9303      	str	r3, [sp, #12]
 8000e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e68:	443b      	add	r3, r7
 8000e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e6c:	e76a      	b.n	8000d44 <_vfiprintf_r+0x78>
 8000e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e72:	460c      	mov	r4, r1
 8000e74:	2001      	movs	r0, #1
 8000e76:	e7a8      	b.n	8000dca <_vfiprintf_r+0xfe>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	3401      	adds	r4, #1
 8000e7c:	9305      	str	r3, [sp, #20]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 0c0a 	mov.w	ip, #10
 8000e84:	4620      	mov	r0, r4
 8000e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e8a:	3a30      	subs	r2, #48	@ 0x30
 8000e8c:	2a09      	cmp	r2, #9
 8000e8e:	d903      	bls.n	8000e98 <_vfiprintf_r+0x1cc>
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0c6      	beq.n	8000e22 <_vfiprintf_r+0x156>
 8000e94:	9105      	str	r1, [sp, #20]
 8000e96:	e7c4      	b.n	8000e22 <_vfiprintf_r+0x156>
 8000e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e7f0      	b.n	8000e84 <_vfiprintf_r+0x1b8>
 8000ea2:	ab03      	add	r3, sp, #12
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	462a      	mov	r2, r5
 8000ea8:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <_vfiprintf_r+0x22c>)
 8000eaa:	a904      	add	r1, sp, #16
 8000eac:	4630      	mov	r0, r6
 8000eae:	f3af 8000 	nop.w
 8000eb2:	4607      	mov	r7, r0
 8000eb4:	1c78      	adds	r0, r7, #1
 8000eb6:	d1d6      	bne.n	8000e66 <_vfiprintf_r+0x19a>
 8000eb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000eba:	07d9      	lsls	r1, r3, #31
 8000ebc:	d405      	bmi.n	8000eca <_vfiprintf_r+0x1fe>
 8000ebe:	89ab      	ldrh	r3, [r5, #12]
 8000ec0:	059a      	lsls	r2, r3, #22
 8000ec2:	d402      	bmi.n	8000eca <_vfiprintf_r+0x1fe>
 8000ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ec6:	f7ff fddf 	bl	8000a88 <__retarget_lock_release_recursive>
 8000eca:	89ab      	ldrh	r3, [r5, #12]
 8000ecc:	065b      	lsls	r3, r3, #25
 8000ece:	f53f af1f 	bmi.w	8000d10 <_vfiprintf_r+0x44>
 8000ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ed4:	e71e      	b.n	8000d14 <_vfiprintf_r+0x48>
 8000ed6:	ab03      	add	r3, sp, #12
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	462a      	mov	r2, r5
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <_vfiprintf_r+0x22c>)
 8000ede:	a904      	add	r1, sp, #16
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	f000 f879 	bl	8000fd8 <_printf_i>
 8000ee6:	e7e4      	b.n	8000eb2 <_vfiprintf_r+0x1e6>
 8000ee8:	080015d4 	.word	0x080015d4
 8000eec:	080015da 	.word	0x080015da
 8000ef0:	080015de 	.word	0x080015de
 8000ef4:	00000000 	.word	0x00000000
 8000ef8:	08000ca7 	.word	0x08000ca7

08000efc <_printf_common>:
 8000efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f00:	4616      	mov	r6, r2
 8000f02:	4698      	mov	r8, r3
 8000f04:	688a      	ldr	r2, [r1, #8]
 8000f06:	690b      	ldr	r3, [r1, #16]
 8000f08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	bfb8      	it	lt
 8000f10:	4613      	movlt	r3, r2
 8000f12:	6033      	str	r3, [r6, #0]
 8000f14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f18:	4607      	mov	r7, r0
 8000f1a:	460c      	mov	r4, r1
 8000f1c:	b10a      	cbz	r2, 8000f22 <_printf_common+0x26>
 8000f1e:	3301      	adds	r3, #1
 8000f20:	6033      	str	r3, [r6, #0]
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	0699      	lsls	r1, r3, #26
 8000f26:	bf42      	ittt	mi
 8000f28:	6833      	ldrmi	r3, [r6, #0]
 8000f2a:	3302      	addmi	r3, #2
 8000f2c:	6033      	strmi	r3, [r6, #0]
 8000f2e:	6825      	ldr	r5, [r4, #0]
 8000f30:	f015 0506 	ands.w	r5, r5, #6
 8000f34:	d106      	bne.n	8000f44 <_printf_common+0x48>
 8000f36:	f104 0a19 	add.w	sl, r4, #25
 8000f3a:	68e3      	ldr	r3, [r4, #12]
 8000f3c:	6832      	ldr	r2, [r6, #0]
 8000f3e:	1a9b      	subs	r3, r3, r2
 8000f40:	42ab      	cmp	r3, r5
 8000f42:	dc26      	bgt.n	8000f92 <_printf_common+0x96>
 8000f44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f48:	6822      	ldr	r2, [r4, #0]
 8000f4a:	3b00      	subs	r3, #0
 8000f4c:	bf18      	it	ne
 8000f4e:	2301      	movne	r3, #1
 8000f50:	0692      	lsls	r2, r2, #26
 8000f52:	d42b      	bmi.n	8000fac <_printf_common+0xb0>
 8000f54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f58:	4641      	mov	r1, r8
 8000f5a:	4638      	mov	r0, r7
 8000f5c:	47c8      	blx	r9
 8000f5e:	3001      	adds	r0, #1
 8000f60:	d01e      	beq.n	8000fa0 <_printf_common+0xa4>
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	6922      	ldr	r2, [r4, #16]
 8000f66:	f003 0306 	and.w	r3, r3, #6
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf02      	ittt	eq
 8000f6e:	68e5      	ldreq	r5, [r4, #12]
 8000f70:	6833      	ldreq	r3, [r6, #0]
 8000f72:	1aed      	subeq	r5, r5, r3
 8000f74:	68a3      	ldr	r3, [r4, #8]
 8000f76:	bf0c      	ite	eq
 8000f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f7c:	2500      	movne	r5, #0
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	bfc4      	itt	gt
 8000f82:	1a9b      	subgt	r3, r3, r2
 8000f84:	18ed      	addgt	r5, r5, r3
 8000f86:	2600      	movs	r6, #0
 8000f88:	341a      	adds	r4, #26
 8000f8a:	42b5      	cmp	r5, r6
 8000f8c:	d11a      	bne.n	8000fc4 <_printf_common+0xc8>
 8000f8e:	2000      	movs	r0, #0
 8000f90:	e008      	b.n	8000fa4 <_printf_common+0xa8>
 8000f92:	2301      	movs	r3, #1
 8000f94:	4652      	mov	r2, sl
 8000f96:	4641      	mov	r1, r8
 8000f98:	4638      	mov	r0, r7
 8000f9a:	47c8      	blx	r9
 8000f9c:	3001      	adds	r0, #1
 8000f9e:	d103      	bne.n	8000fa8 <_printf_common+0xac>
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa8:	3501      	adds	r5, #1
 8000faa:	e7c6      	b.n	8000f3a <_printf_common+0x3e>
 8000fac:	18e1      	adds	r1, r4, r3
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	2030      	movs	r0, #48	@ 0x30
 8000fb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000fb6:	4422      	add	r2, r4
 8000fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000fbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	e7c7      	b.n	8000f54 <_printf_common+0x58>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	4622      	mov	r2, r4
 8000fc8:	4641      	mov	r1, r8
 8000fca:	4638      	mov	r0, r7
 8000fcc:	47c8      	blx	r9
 8000fce:	3001      	adds	r0, #1
 8000fd0:	d0e6      	beq.n	8000fa0 <_printf_common+0xa4>
 8000fd2:	3601      	adds	r6, #1
 8000fd4:	e7d9      	b.n	8000f8a <_printf_common+0x8e>
	...

08000fd8 <_printf_i>:
 8000fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fdc:	7e0f      	ldrb	r7, [r1, #24]
 8000fde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000fe0:	2f78      	cmp	r7, #120	@ 0x78
 8000fe2:	4691      	mov	r9, r2
 8000fe4:	4680      	mov	r8, r0
 8000fe6:	460c      	mov	r4, r1
 8000fe8:	469a      	mov	sl, r3
 8000fea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000fee:	d807      	bhi.n	8001000 <_printf_i+0x28>
 8000ff0:	2f62      	cmp	r7, #98	@ 0x62
 8000ff2:	d80a      	bhi.n	800100a <_printf_i+0x32>
 8000ff4:	2f00      	cmp	r7, #0
 8000ff6:	f000 80d2 	beq.w	800119e <_printf_i+0x1c6>
 8000ffa:	2f58      	cmp	r7, #88	@ 0x58
 8000ffc:	f000 80b9 	beq.w	8001172 <_printf_i+0x19a>
 8001000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001004:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001008:	e03a      	b.n	8001080 <_printf_i+0xa8>
 800100a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800100e:	2b15      	cmp	r3, #21
 8001010:	d8f6      	bhi.n	8001000 <_printf_i+0x28>
 8001012:	a101      	add	r1, pc, #4	@ (adr r1, 8001018 <_printf_i+0x40>)
 8001014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001018:	08001071 	.word	0x08001071
 800101c:	08001085 	.word	0x08001085
 8001020:	08001001 	.word	0x08001001
 8001024:	08001001 	.word	0x08001001
 8001028:	08001001 	.word	0x08001001
 800102c:	08001001 	.word	0x08001001
 8001030:	08001085 	.word	0x08001085
 8001034:	08001001 	.word	0x08001001
 8001038:	08001001 	.word	0x08001001
 800103c:	08001001 	.word	0x08001001
 8001040:	08001001 	.word	0x08001001
 8001044:	08001185 	.word	0x08001185
 8001048:	080010af 	.word	0x080010af
 800104c:	0800113f 	.word	0x0800113f
 8001050:	08001001 	.word	0x08001001
 8001054:	08001001 	.word	0x08001001
 8001058:	080011a7 	.word	0x080011a7
 800105c:	08001001 	.word	0x08001001
 8001060:	080010af 	.word	0x080010af
 8001064:	08001001 	.word	0x08001001
 8001068:	08001001 	.word	0x08001001
 800106c:	08001147 	.word	0x08001147
 8001070:	6833      	ldr	r3, [r6, #0]
 8001072:	1d1a      	adds	r2, r3, #4
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6032      	str	r2, [r6, #0]
 8001078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800107c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001080:	2301      	movs	r3, #1
 8001082:	e09d      	b.n	80011c0 <_printf_i+0x1e8>
 8001084:	6833      	ldr	r3, [r6, #0]
 8001086:	6820      	ldr	r0, [r4, #0]
 8001088:	1d19      	adds	r1, r3, #4
 800108a:	6031      	str	r1, [r6, #0]
 800108c:	0606      	lsls	r6, r0, #24
 800108e:	d501      	bpl.n	8001094 <_printf_i+0xbc>
 8001090:	681d      	ldr	r5, [r3, #0]
 8001092:	e003      	b.n	800109c <_printf_i+0xc4>
 8001094:	0645      	lsls	r5, r0, #25
 8001096:	d5fb      	bpl.n	8001090 <_printf_i+0xb8>
 8001098:	f9b3 5000 	ldrsh.w	r5, [r3]
 800109c:	2d00      	cmp	r5, #0
 800109e:	da03      	bge.n	80010a8 <_printf_i+0xd0>
 80010a0:	232d      	movs	r3, #45	@ 0x2d
 80010a2:	426d      	negs	r5, r5
 80010a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010a8:	4859      	ldr	r0, [pc, #356]	@ (8001210 <_printf_i+0x238>)
 80010aa:	230a      	movs	r3, #10
 80010ac:	e011      	b.n	80010d2 <_printf_i+0xfa>
 80010ae:	6821      	ldr	r1, [r4, #0]
 80010b0:	6833      	ldr	r3, [r6, #0]
 80010b2:	0608      	lsls	r0, r1, #24
 80010b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80010b8:	d402      	bmi.n	80010c0 <_printf_i+0xe8>
 80010ba:	0649      	lsls	r1, r1, #25
 80010bc:	bf48      	it	mi
 80010be:	b2ad      	uxthmi	r5, r5
 80010c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80010c2:	4853      	ldr	r0, [pc, #332]	@ (8001210 <_printf_i+0x238>)
 80010c4:	6033      	str	r3, [r6, #0]
 80010c6:	bf14      	ite	ne
 80010c8:	230a      	movne	r3, #10
 80010ca:	2308      	moveq	r3, #8
 80010cc:	2100      	movs	r1, #0
 80010ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80010d2:	6866      	ldr	r6, [r4, #4]
 80010d4:	60a6      	str	r6, [r4, #8]
 80010d6:	2e00      	cmp	r6, #0
 80010d8:	bfa2      	ittt	ge
 80010da:	6821      	ldrge	r1, [r4, #0]
 80010dc:	f021 0104 	bicge.w	r1, r1, #4
 80010e0:	6021      	strge	r1, [r4, #0]
 80010e2:	b90d      	cbnz	r5, 80010e8 <_printf_i+0x110>
 80010e4:	2e00      	cmp	r6, #0
 80010e6:	d04b      	beq.n	8001180 <_printf_i+0x1a8>
 80010e8:	4616      	mov	r6, r2
 80010ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80010ee:	fb03 5711 	mls	r7, r3, r1, r5
 80010f2:	5dc7      	ldrb	r7, [r0, r7]
 80010f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80010f8:	462f      	mov	r7, r5
 80010fa:	42bb      	cmp	r3, r7
 80010fc:	460d      	mov	r5, r1
 80010fe:	d9f4      	bls.n	80010ea <_printf_i+0x112>
 8001100:	2b08      	cmp	r3, #8
 8001102:	d10b      	bne.n	800111c <_printf_i+0x144>
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	07df      	lsls	r7, r3, #31
 8001108:	d508      	bpl.n	800111c <_printf_i+0x144>
 800110a:	6923      	ldr	r3, [r4, #16]
 800110c:	6861      	ldr	r1, [r4, #4]
 800110e:	4299      	cmp	r1, r3
 8001110:	bfde      	ittt	le
 8001112:	2330      	movle	r3, #48	@ 0x30
 8001114:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001118:	f106 36ff 	addle.w	r6, r6, #4294967295
 800111c:	1b92      	subs	r2, r2, r6
 800111e:	6122      	str	r2, [r4, #16]
 8001120:	f8cd a000 	str.w	sl, [sp]
 8001124:	464b      	mov	r3, r9
 8001126:	aa03      	add	r2, sp, #12
 8001128:	4621      	mov	r1, r4
 800112a:	4640      	mov	r0, r8
 800112c:	f7ff fee6 	bl	8000efc <_printf_common>
 8001130:	3001      	adds	r0, #1
 8001132:	d14a      	bne.n	80011ca <_printf_i+0x1f2>
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	b004      	add	sp, #16
 800113a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	f043 0320 	orr.w	r3, r3, #32
 8001144:	6023      	str	r3, [r4, #0]
 8001146:	4833      	ldr	r0, [pc, #204]	@ (8001214 <_printf_i+0x23c>)
 8001148:	2778      	movs	r7, #120	@ 0x78
 800114a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	6831      	ldr	r1, [r6, #0]
 8001152:	061f      	lsls	r7, r3, #24
 8001154:	f851 5b04 	ldr.w	r5, [r1], #4
 8001158:	d402      	bmi.n	8001160 <_printf_i+0x188>
 800115a:	065f      	lsls	r7, r3, #25
 800115c:	bf48      	it	mi
 800115e:	b2ad      	uxthmi	r5, r5
 8001160:	6031      	str	r1, [r6, #0]
 8001162:	07d9      	lsls	r1, r3, #31
 8001164:	bf44      	itt	mi
 8001166:	f043 0320 	orrmi.w	r3, r3, #32
 800116a:	6023      	strmi	r3, [r4, #0]
 800116c:	b11d      	cbz	r5, 8001176 <_printf_i+0x19e>
 800116e:	2310      	movs	r3, #16
 8001170:	e7ac      	b.n	80010cc <_printf_i+0xf4>
 8001172:	4827      	ldr	r0, [pc, #156]	@ (8001210 <_printf_i+0x238>)
 8001174:	e7e9      	b.n	800114a <_printf_i+0x172>
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	f023 0320 	bic.w	r3, r3, #32
 800117c:	6023      	str	r3, [r4, #0]
 800117e:	e7f6      	b.n	800116e <_printf_i+0x196>
 8001180:	4616      	mov	r6, r2
 8001182:	e7bd      	b.n	8001100 <_printf_i+0x128>
 8001184:	6833      	ldr	r3, [r6, #0]
 8001186:	6825      	ldr	r5, [r4, #0]
 8001188:	6961      	ldr	r1, [r4, #20]
 800118a:	1d18      	adds	r0, r3, #4
 800118c:	6030      	str	r0, [r6, #0]
 800118e:	062e      	lsls	r6, r5, #24
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	d501      	bpl.n	8001198 <_printf_i+0x1c0>
 8001194:	6019      	str	r1, [r3, #0]
 8001196:	e002      	b.n	800119e <_printf_i+0x1c6>
 8001198:	0668      	lsls	r0, r5, #25
 800119a:	d5fb      	bpl.n	8001194 <_printf_i+0x1bc>
 800119c:	8019      	strh	r1, [r3, #0]
 800119e:	2300      	movs	r3, #0
 80011a0:	6123      	str	r3, [r4, #16]
 80011a2:	4616      	mov	r6, r2
 80011a4:	e7bc      	b.n	8001120 <_printf_i+0x148>
 80011a6:	6833      	ldr	r3, [r6, #0]
 80011a8:	1d1a      	adds	r2, r3, #4
 80011aa:	6032      	str	r2, [r6, #0]
 80011ac:	681e      	ldr	r6, [r3, #0]
 80011ae:	6862      	ldr	r2, [r4, #4]
 80011b0:	2100      	movs	r1, #0
 80011b2:	4630      	mov	r0, r6
 80011b4:	f7ff f80c 	bl	80001d0 <memchr>
 80011b8:	b108      	cbz	r0, 80011be <_printf_i+0x1e6>
 80011ba:	1b80      	subs	r0, r0, r6
 80011bc:	6060      	str	r0, [r4, #4]
 80011be:	6863      	ldr	r3, [r4, #4]
 80011c0:	6123      	str	r3, [r4, #16]
 80011c2:	2300      	movs	r3, #0
 80011c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011c8:	e7aa      	b.n	8001120 <_printf_i+0x148>
 80011ca:	6923      	ldr	r3, [r4, #16]
 80011cc:	4632      	mov	r2, r6
 80011ce:	4649      	mov	r1, r9
 80011d0:	4640      	mov	r0, r8
 80011d2:	47d0      	blx	sl
 80011d4:	3001      	adds	r0, #1
 80011d6:	d0ad      	beq.n	8001134 <_printf_i+0x15c>
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	079b      	lsls	r3, r3, #30
 80011dc:	d413      	bmi.n	8001206 <_printf_i+0x22e>
 80011de:	68e0      	ldr	r0, [r4, #12]
 80011e0:	9b03      	ldr	r3, [sp, #12]
 80011e2:	4298      	cmp	r0, r3
 80011e4:	bfb8      	it	lt
 80011e6:	4618      	movlt	r0, r3
 80011e8:	e7a6      	b.n	8001138 <_printf_i+0x160>
 80011ea:	2301      	movs	r3, #1
 80011ec:	4632      	mov	r2, r6
 80011ee:	4649      	mov	r1, r9
 80011f0:	4640      	mov	r0, r8
 80011f2:	47d0      	blx	sl
 80011f4:	3001      	adds	r0, #1
 80011f6:	d09d      	beq.n	8001134 <_printf_i+0x15c>
 80011f8:	3501      	adds	r5, #1
 80011fa:	68e3      	ldr	r3, [r4, #12]
 80011fc:	9903      	ldr	r1, [sp, #12]
 80011fe:	1a5b      	subs	r3, r3, r1
 8001200:	42ab      	cmp	r3, r5
 8001202:	dcf2      	bgt.n	80011ea <_printf_i+0x212>
 8001204:	e7eb      	b.n	80011de <_printf_i+0x206>
 8001206:	2500      	movs	r5, #0
 8001208:	f104 0619 	add.w	r6, r4, #25
 800120c:	e7f5      	b.n	80011fa <_printf_i+0x222>
 800120e:	bf00      	nop
 8001210:	080015e5 	.word	0x080015e5
 8001214:	080015f6 	.word	0x080015f6

08001218 <__sflush_r>:
 8001218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	0716      	lsls	r6, r2, #28
 8001220:	4605      	mov	r5, r0
 8001222:	460c      	mov	r4, r1
 8001224:	d454      	bmi.n	80012d0 <__sflush_r+0xb8>
 8001226:	684b      	ldr	r3, [r1, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	dc02      	bgt.n	8001232 <__sflush_r+0x1a>
 800122c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800122e:	2b00      	cmp	r3, #0
 8001230:	dd48      	ble.n	80012c4 <__sflush_r+0xac>
 8001232:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001234:	2e00      	cmp	r6, #0
 8001236:	d045      	beq.n	80012c4 <__sflush_r+0xac>
 8001238:	2300      	movs	r3, #0
 800123a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800123e:	682f      	ldr	r7, [r5, #0]
 8001240:	6a21      	ldr	r1, [r4, #32]
 8001242:	602b      	str	r3, [r5, #0]
 8001244:	d030      	beq.n	80012a8 <__sflush_r+0x90>
 8001246:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001248:	89a3      	ldrh	r3, [r4, #12]
 800124a:	0759      	lsls	r1, r3, #29
 800124c:	d505      	bpl.n	800125a <__sflush_r+0x42>
 800124e:	6863      	ldr	r3, [r4, #4]
 8001250:	1ad2      	subs	r2, r2, r3
 8001252:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001254:	b10b      	cbz	r3, 800125a <__sflush_r+0x42>
 8001256:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001258:	1ad2      	subs	r2, r2, r3
 800125a:	2300      	movs	r3, #0
 800125c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800125e:	6a21      	ldr	r1, [r4, #32]
 8001260:	4628      	mov	r0, r5
 8001262:	47b0      	blx	r6
 8001264:	1c43      	adds	r3, r0, #1
 8001266:	89a3      	ldrh	r3, [r4, #12]
 8001268:	d106      	bne.n	8001278 <__sflush_r+0x60>
 800126a:	6829      	ldr	r1, [r5, #0]
 800126c:	291d      	cmp	r1, #29
 800126e:	d82b      	bhi.n	80012c8 <__sflush_r+0xb0>
 8001270:	4a28      	ldr	r2, [pc, #160]	@ (8001314 <__sflush_r+0xfc>)
 8001272:	410a      	asrs	r2, r1
 8001274:	07d6      	lsls	r6, r2, #31
 8001276:	d427      	bmi.n	80012c8 <__sflush_r+0xb0>
 8001278:	2200      	movs	r2, #0
 800127a:	6062      	str	r2, [r4, #4]
 800127c:	04d9      	lsls	r1, r3, #19
 800127e:	6922      	ldr	r2, [r4, #16]
 8001280:	6022      	str	r2, [r4, #0]
 8001282:	d504      	bpl.n	800128e <__sflush_r+0x76>
 8001284:	1c42      	adds	r2, r0, #1
 8001286:	d101      	bne.n	800128c <__sflush_r+0x74>
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	b903      	cbnz	r3, 800128e <__sflush_r+0x76>
 800128c:	6560      	str	r0, [r4, #84]	@ 0x54
 800128e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001290:	602f      	str	r7, [r5, #0]
 8001292:	b1b9      	cbz	r1, 80012c4 <__sflush_r+0xac>
 8001294:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001298:	4299      	cmp	r1, r3
 800129a:	d002      	beq.n	80012a2 <__sflush_r+0x8a>
 800129c:	4628      	mov	r0, r5
 800129e:	f7ff fbf5 	bl	8000a8c <_free_r>
 80012a2:	2300      	movs	r3, #0
 80012a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80012a6:	e00d      	b.n	80012c4 <__sflush_r+0xac>
 80012a8:	2301      	movs	r3, #1
 80012aa:	4628      	mov	r0, r5
 80012ac:	47b0      	blx	r6
 80012ae:	4602      	mov	r2, r0
 80012b0:	1c50      	adds	r0, r2, #1
 80012b2:	d1c9      	bne.n	8001248 <__sflush_r+0x30>
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0c6      	beq.n	8001248 <__sflush_r+0x30>
 80012ba:	2b1d      	cmp	r3, #29
 80012bc:	d001      	beq.n	80012c2 <__sflush_r+0xaa>
 80012be:	2b16      	cmp	r3, #22
 80012c0:	d11d      	bne.n	80012fe <__sflush_r+0xe6>
 80012c2:	602f      	str	r7, [r5, #0]
 80012c4:	2000      	movs	r0, #0
 80012c6:	e021      	b.n	800130c <__sflush_r+0xf4>
 80012c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	e01a      	b.n	8001306 <__sflush_r+0xee>
 80012d0:	690f      	ldr	r7, [r1, #16]
 80012d2:	2f00      	cmp	r7, #0
 80012d4:	d0f6      	beq.n	80012c4 <__sflush_r+0xac>
 80012d6:	0793      	lsls	r3, r2, #30
 80012d8:	680e      	ldr	r6, [r1, #0]
 80012da:	bf08      	it	eq
 80012dc:	694b      	ldreq	r3, [r1, #20]
 80012de:	600f      	str	r7, [r1, #0]
 80012e0:	bf18      	it	ne
 80012e2:	2300      	movne	r3, #0
 80012e4:	1bf6      	subs	r6, r6, r7
 80012e6:	608b      	str	r3, [r1, #8]
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	ddeb      	ble.n	80012c4 <__sflush_r+0xac>
 80012ec:	6a21      	ldr	r1, [r4, #32]
 80012ee:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80012f2:	4633      	mov	r3, r6
 80012f4:	463a      	mov	r2, r7
 80012f6:	4628      	mov	r0, r5
 80012f8:	47e0      	blx	ip
 80012fa:	2800      	cmp	r0, #0
 80012fc:	dc07      	bgt.n	800130e <__sflush_r+0xf6>
 80012fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001306:	81a3      	strh	r3, [r4, #12]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800130e:	4407      	add	r7, r0
 8001310:	1a36      	subs	r6, r6, r0
 8001312:	e7e9      	b.n	80012e8 <__sflush_r+0xd0>
 8001314:	dfbffffe 	.word	0xdfbffffe

08001318 <_fflush_r>:
 8001318:	b538      	push	{r3, r4, r5, lr}
 800131a:	690b      	ldr	r3, [r1, #16]
 800131c:	4605      	mov	r5, r0
 800131e:	460c      	mov	r4, r1
 8001320:	b913      	cbnz	r3, 8001328 <_fflush_r+0x10>
 8001322:	2500      	movs	r5, #0
 8001324:	4628      	mov	r0, r5
 8001326:	bd38      	pop	{r3, r4, r5, pc}
 8001328:	b118      	cbz	r0, 8001332 <_fflush_r+0x1a>
 800132a:	6a03      	ldr	r3, [r0, #32]
 800132c:	b90b      	cbnz	r3, 8001332 <_fflush_r+0x1a>
 800132e:	f7ff faa5 	bl	800087c <__sinit>
 8001332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f3      	beq.n	8001322 <_fflush_r+0xa>
 800133a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800133c:	07d0      	lsls	r0, r2, #31
 800133e:	d404      	bmi.n	800134a <_fflush_r+0x32>
 8001340:	0599      	lsls	r1, r3, #22
 8001342:	d402      	bmi.n	800134a <_fflush_r+0x32>
 8001344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001346:	f7ff fb9e 	bl	8000a86 <__retarget_lock_acquire_recursive>
 800134a:	4628      	mov	r0, r5
 800134c:	4621      	mov	r1, r4
 800134e:	f7ff ff63 	bl	8001218 <__sflush_r>
 8001352:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001354:	07da      	lsls	r2, r3, #31
 8001356:	4605      	mov	r5, r0
 8001358:	d4e4      	bmi.n	8001324 <_fflush_r+0xc>
 800135a:	89a3      	ldrh	r3, [r4, #12]
 800135c:	059b      	lsls	r3, r3, #22
 800135e:	d4e1      	bmi.n	8001324 <_fflush_r+0xc>
 8001360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001362:	f7ff fb91 	bl	8000a88 <__retarget_lock_release_recursive>
 8001366:	e7dd      	b.n	8001324 <_fflush_r+0xc>

08001368 <__swbuf_r>:
 8001368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800136a:	460e      	mov	r6, r1
 800136c:	4614      	mov	r4, r2
 800136e:	4605      	mov	r5, r0
 8001370:	b118      	cbz	r0, 800137a <__swbuf_r+0x12>
 8001372:	6a03      	ldr	r3, [r0, #32]
 8001374:	b90b      	cbnz	r3, 800137a <__swbuf_r+0x12>
 8001376:	f7ff fa81 	bl	800087c <__sinit>
 800137a:	69a3      	ldr	r3, [r4, #24]
 800137c:	60a3      	str	r3, [r4, #8]
 800137e:	89a3      	ldrh	r3, [r4, #12]
 8001380:	071a      	lsls	r2, r3, #28
 8001382:	d501      	bpl.n	8001388 <__swbuf_r+0x20>
 8001384:	6923      	ldr	r3, [r4, #16]
 8001386:	b943      	cbnz	r3, 800139a <__swbuf_r+0x32>
 8001388:	4621      	mov	r1, r4
 800138a:	4628      	mov	r0, r5
 800138c:	f000 f82a 	bl	80013e4 <__swsetup_r>
 8001390:	b118      	cbz	r0, 800139a <__swbuf_r+0x32>
 8001392:	f04f 37ff 	mov.w	r7, #4294967295
 8001396:	4638      	mov	r0, r7
 8001398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	6922      	ldr	r2, [r4, #16]
 800139e:	1a98      	subs	r0, r3, r2
 80013a0:	6963      	ldr	r3, [r4, #20]
 80013a2:	b2f6      	uxtb	r6, r6
 80013a4:	4283      	cmp	r3, r0
 80013a6:	4637      	mov	r7, r6
 80013a8:	dc05      	bgt.n	80013b6 <__swbuf_r+0x4e>
 80013aa:	4621      	mov	r1, r4
 80013ac:	4628      	mov	r0, r5
 80013ae:	f7ff ffb3 	bl	8001318 <_fflush_r>
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d1ed      	bne.n	8001392 <__swbuf_r+0x2a>
 80013b6:	68a3      	ldr	r3, [r4, #8]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	60a3      	str	r3, [r4, #8]
 80013bc:	6823      	ldr	r3, [r4, #0]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	6022      	str	r2, [r4, #0]
 80013c2:	701e      	strb	r6, [r3, #0]
 80013c4:	6962      	ldr	r2, [r4, #20]
 80013c6:	1c43      	adds	r3, r0, #1
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d004      	beq.n	80013d6 <__swbuf_r+0x6e>
 80013cc:	89a3      	ldrh	r3, [r4, #12]
 80013ce:	07db      	lsls	r3, r3, #31
 80013d0:	d5e1      	bpl.n	8001396 <__swbuf_r+0x2e>
 80013d2:	2e0a      	cmp	r6, #10
 80013d4:	d1df      	bne.n	8001396 <__swbuf_r+0x2e>
 80013d6:	4621      	mov	r1, r4
 80013d8:	4628      	mov	r0, r5
 80013da:	f7ff ff9d 	bl	8001318 <_fflush_r>
 80013de:	2800      	cmp	r0, #0
 80013e0:	d0d9      	beq.n	8001396 <__swbuf_r+0x2e>
 80013e2:	e7d6      	b.n	8001392 <__swbuf_r+0x2a>

080013e4 <__swsetup_r>:
 80013e4:	b538      	push	{r3, r4, r5, lr}
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <__swsetup_r+0xa8>)
 80013e8:	4605      	mov	r5, r0
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	460c      	mov	r4, r1
 80013ee:	b118      	cbz	r0, 80013f8 <__swsetup_r+0x14>
 80013f0:	6a03      	ldr	r3, [r0, #32]
 80013f2:	b90b      	cbnz	r3, 80013f8 <__swsetup_r+0x14>
 80013f4:	f7ff fa42 	bl	800087c <__sinit>
 80013f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013fc:	0719      	lsls	r1, r3, #28
 80013fe:	d422      	bmi.n	8001446 <__swsetup_r+0x62>
 8001400:	06da      	lsls	r2, r3, #27
 8001402:	d407      	bmi.n	8001414 <__swsetup_r+0x30>
 8001404:	2209      	movs	r2, #9
 8001406:	602a      	str	r2, [r5, #0]
 8001408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800140c:	81a3      	strh	r3, [r4, #12]
 800140e:	f04f 30ff 	mov.w	r0, #4294967295
 8001412:	e033      	b.n	800147c <__swsetup_r+0x98>
 8001414:	0758      	lsls	r0, r3, #29
 8001416:	d512      	bpl.n	800143e <__swsetup_r+0x5a>
 8001418:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800141a:	b141      	cbz	r1, 800142e <__swsetup_r+0x4a>
 800141c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001420:	4299      	cmp	r1, r3
 8001422:	d002      	beq.n	800142a <__swsetup_r+0x46>
 8001424:	4628      	mov	r0, r5
 8001426:	f7ff fb31 	bl	8000a8c <_free_r>
 800142a:	2300      	movs	r3, #0
 800142c:	6363      	str	r3, [r4, #52]	@ 0x34
 800142e:	89a3      	ldrh	r3, [r4, #12]
 8001430:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001434:	81a3      	strh	r3, [r4, #12]
 8001436:	2300      	movs	r3, #0
 8001438:	6063      	str	r3, [r4, #4]
 800143a:	6923      	ldr	r3, [r4, #16]
 800143c:	6023      	str	r3, [r4, #0]
 800143e:	89a3      	ldrh	r3, [r4, #12]
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	81a3      	strh	r3, [r4, #12]
 8001446:	6923      	ldr	r3, [r4, #16]
 8001448:	b94b      	cbnz	r3, 800145e <__swsetup_r+0x7a>
 800144a:	89a3      	ldrh	r3, [r4, #12]
 800144c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001454:	d003      	beq.n	800145e <__swsetup_r+0x7a>
 8001456:	4621      	mov	r1, r4
 8001458:	4628      	mov	r0, r5
 800145a:	f000 f84f 	bl	80014fc <__smakebuf_r>
 800145e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001462:	f013 0201 	ands.w	r2, r3, #1
 8001466:	d00a      	beq.n	800147e <__swsetup_r+0x9a>
 8001468:	2200      	movs	r2, #0
 800146a:	60a2      	str	r2, [r4, #8]
 800146c:	6962      	ldr	r2, [r4, #20]
 800146e:	4252      	negs	r2, r2
 8001470:	61a2      	str	r2, [r4, #24]
 8001472:	6922      	ldr	r2, [r4, #16]
 8001474:	b942      	cbnz	r2, 8001488 <__swsetup_r+0xa4>
 8001476:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800147a:	d1c5      	bne.n	8001408 <__swsetup_r+0x24>
 800147c:	bd38      	pop	{r3, r4, r5, pc}
 800147e:	0799      	lsls	r1, r3, #30
 8001480:	bf58      	it	pl
 8001482:	6962      	ldrpl	r2, [r4, #20]
 8001484:	60a2      	str	r2, [r4, #8]
 8001486:	e7f4      	b.n	8001472 <__swsetup_r+0x8e>
 8001488:	2000      	movs	r0, #0
 800148a:	e7f7      	b.n	800147c <__swsetup_r+0x98>
 800148c:	2000000c 	.word	0x2000000c

08001490 <_sbrk_r>:
 8001490:	b538      	push	{r3, r4, r5, lr}
 8001492:	4d06      	ldr	r5, [pc, #24]	@ (80014ac <_sbrk_r+0x1c>)
 8001494:	2300      	movs	r3, #0
 8001496:	4604      	mov	r4, r0
 8001498:	4608      	mov	r0, r1
 800149a:	602b      	str	r3, [r5, #0]
 800149c:	f7ff f902 	bl	80006a4 <_sbrk>
 80014a0:	1c43      	adds	r3, r0, #1
 80014a2:	d102      	bne.n	80014aa <_sbrk_r+0x1a>
 80014a4:	682b      	ldr	r3, [r5, #0]
 80014a6:	b103      	cbz	r3, 80014aa <_sbrk_r+0x1a>
 80014a8:	6023      	str	r3, [r4, #0]
 80014aa:	bd38      	pop	{r3, r4, r5, pc}
 80014ac:	200001b8 	.word	0x200001b8

080014b0 <__swhatbuf_r>:
 80014b0:	b570      	push	{r4, r5, r6, lr}
 80014b2:	460c      	mov	r4, r1
 80014b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014b8:	2900      	cmp	r1, #0
 80014ba:	b096      	sub	sp, #88	@ 0x58
 80014bc:	4615      	mov	r5, r2
 80014be:	461e      	mov	r6, r3
 80014c0:	da0d      	bge.n	80014de <__swhatbuf_r+0x2e>
 80014c2:	89a3      	ldrh	r3, [r4, #12]
 80014c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80014c8:	f04f 0100 	mov.w	r1, #0
 80014cc:	bf14      	ite	ne
 80014ce:	2340      	movne	r3, #64	@ 0x40
 80014d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80014d4:	2000      	movs	r0, #0
 80014d6:	6031      	str	r1, [r6, #0]
 80014d8:	602b      	str	r3, [r5, #0]
 80014da:	b016      	add	sp, #88	@ 0x58
 80014dc:	bd70      	pop	{r4, r5, r6, pc}
 80014de:	466a      	mov	r2, sp
 80014e0:	f000 f848 	bl	8001574 <_fstat_r>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	dbec      	blt.n	80014c2 <__swhatbuf_r+0x12>
 80014e8:	9901      	ldr	r1, [sp, #4]
 80014ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80014ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80014f2:	4259      	negs	r1, r3
 80014f4:	4159      	adcs	r1, r3
 80014f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014fa:	e7eb      	b.n	80014d4 <__swhatbuf_r+0x24>

080014fc <__smakebuf_r>:
 80014fc:	898b      	ldrh	r3, [r1, #12]
 80014fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001500:	079d      	lsls	r5, r3, #30
 8001502:	4606      	mov	r6, r0
 8001504:	460c      	mov	r4, r1
 8001506:	d507      	bpl.n	8001518 <__smakebuf_r+0x1c>
 8001508:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800150c:	6023      	str	r3, [r4, #0]
 800150e:	6123      	str	r3, [r4, #16]
 8001510:	2301      	movs	r3, #1
 8001512:	6163      	str	r3, [r4, #20]
 8001514:	b003      	add	sp, #12
 8001516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001518:	ab01      	add	r3, sp, #4
 800151a:	466a      	mov	r2, sp
 800151c:	f7ff ffc8 	bl	80014b0 <__swhatbuf_r>
 8001520:	9f00      	ldr	r7, [sp, #0]
 8001522:	4605      	mov	r5, r0
 8001524:	4639      	mov	r1, r7
 8001526:	4630      	mov	r0, r6
 8001528:	f7ff fb1c 	bl	8000b64 <_malloc_r>
 800152c:	b948      	cbnz	r0, 8001542 <__smakebuf_r+0x46>
 800152e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001532:	059a      	lsls	r2, r3, #22
 8001534:	d4ee      	bmi.n	8001514 <__smakebuf_r+0x18>
 8001536:	f023 0303 	bic.w	r3, r3, #3
 800153a:	f043 0302 	orr.w	r3, r3, #2
 800153e:	81a3      	strh	r3, [r4, #12]
 8001540:	e7e2      	b.n	8001508 <__smakebuf_r+0xc>
 8001542:	89a3      	ldrh	r3, [r4, #12]
 8001544:	6020      	str	r0, [r4, #0]
 8001546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800154a:	81a3      	strh	r3, [r4, #12]
 800154c:	9b01      	ldr	r3, [sp, #4]
 800154e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001552:	b15b      	cbz	r3, 800156c <__smakebuf_r+0x70>
 8001554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001558:	4630      	mov	r0, r6
 800155a:	f000 f81d 	bl	8001598 <_isatty_r>
 800155e:	b128      	cbz	r0, 800156c <__smakebuf_r+0x70>
 8001560:	89a3      	ldrh	r3, [r4, #12]
 8001562:	f023 0303 	bic.w	r3, r3, #3
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	81a3      	strh	r3, [r4, #12]
 800156c:	89a3      	ldrh	r3, [r4, #12]
 800156e:	431d      	orrs	r5, r3
 8001570:	81a5      	strh	r5, [r4, #12]
 8001572:	e7cf      	b.n	8001514 <__smakebuf_r+0x18>

08001574 <_fstat_r>:
 8001574:	b538      	push	{r3, r4, r5, lr}
 8001576:	4d07      	ldr	r5, [pc, #28]	@ (8001594 <_fstat_r+0x20>)
 8001578:	2300      	movs	r3, #0
 800157a:	4604      	mov	r4, r0
 800157c:	4608      	mov	r0, r1
 800157e:	4611      	mov	r1, r2
 8001580:	602b      	str	r3, [r5, #0]
 8001582:	f7ff f869 	bl	8000658 <_fstat>
 8001586:	1c43      	adds	r3, r0, #1
 8001588:	d102      	bne.n	8001590 <_fstat_r+0x1c>
 800158a:	682b      	ldr	r3, [r5, #0]
 800158c:	b103      	cbz	r3, 8001590 <_fstat_r+0x1c>
 800158e:	6023      	str	r3, [r4, #0]
 8001590:	bd38      	pop	{r3, r4, r5, pc}
 8001592:	bf00      	nop
 8001594:	200001b8 	.word	0x200001b8

08001598 <_isatty_r>:
 8001598:	b538      	push	{r3, r4, r5, lr}
 800159a:	4d06      	ldr	r5, [pc, #24]	@ (80015b4 <_isatty_r+0x1c>)
 800159c:	2300      	movs	r3, #0
 800159e:	4604      	mov	r4, r0
 80015a0:	4608      	mov	r0, r1
 80015a2:	602b      	str	r3, [r5, #0]
 80015a4:	f7ff f867 	bl	8000676 <_isatty>
 80015a8:	1c43      	adds	r3, r0, #1
 80015aa:	d102      	bne.n	80015b2 <_isatty_r+0x1a>
 80015ac:	682b      	ldr	r3, [r5, #0]
 80015ae:	b103      	cbz	r3, 80015b2 <_isatty_r+0x1a>
 80015b0:	6023      	str	r3, [r4, #0]
 80015b2:	bd38      	pop	{r3, r4, r5, pc}
 80015b4:	200001b8 	.word	0x200001b8

080015b8 <_init>:
 80015b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ba:	bf00      	nop
 80015bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015be:	bc08      	pop	{r3}
 80015c0:	469e      	mov	lr, r3
 80015c2:	4770      	bx	lr

080015c4 <_fini>:
 80015c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015c6:	bf00      	nop
 80015c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ca:	bc08      	pop	{r3}
 80015cc:	469e      	mov	lr, r3
 80015ce:	4770      	bx	lr
